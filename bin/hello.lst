seg000:0000 ;
seg000:0000 ; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
seg000:0000 ; º	    This file is generated by The Interactive Disassembler (IDA)	º
seg000:0000 ; º	    Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>		º
seg000:0000 ; º			     Licensed to: Freeware version			º
seg000:0000 ; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
seg000:0000 ;
seg000:0000 ; Input MD5	  : 3754B4F4EFEAB79E1BC20405AA0CB198
seg000:0000
seg000:0000 ; File Name	  : C:\stuff\src\dostrace\bin\HELLO.EXE
seg000:0000 ; Format	  : MS-DOS executable (EXE)
seg000:0000 ; Base Address: 1000h Range: 10000h-12870h Loaded length: 1A43h
seg000:0000 ; Entry Point : 1000:20
seg000:0000
seg000:0000		    .8086
seg000:0000		    .model large
seg000:0000
seg000:0000 ; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
seg000:0000
seg000:0000 ; Segment type: Pure code
seg000:0000 seg000	    segment word public	'CODE'
seg000:0000		    assume cs:seg000
seg000:0000		    assume es:nothing, ss:nothing, ds:dseg
seg000:0000		    db 10h dup(	  0)
seg000:0010
seg000:0010 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0010
seg000:0010
seg000:0010 main	    proc near		    ; CODE XREF: start+8Dp
seg000:0010		    xor	    ax,	ax
seg000:0012		    call    __chkstk
seg000:0015		    mov	    ax,	offset aHelloWorld ; "Hello, world!\n"
seg000:0018		    push    ax
seg000:0019		    call    _printf
seg000:001C		    add	    sp,	2
seg000:001F		    retn
seg000:001F main	    endp
seg000:001F
seg000:0020		    assume ss:seg002, ds:nothing
seg000:0020
seg000:0020 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0020
seg000:0020
seg000:0020		    public start
seg000:0020 start	    proc near
seg000:0020		    mov	    ah,	30h
seg000:0022		    int	    21h		    ; DOS - GET	DOS VERSION
seg000:0022					    ; Return: AL = major version number	(00h for DOS 1.x)
seg000:0024		    cmp	    al,	2
seg000:0026		    jnb	    short loc_1002A
seg000:0028		    int	    20h		    ; DOS - PROGRAM TERMINATION
seg000:0028					    ; returns to DOS--identical	to INT 21/AH=00h
seg000:002A ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:002A
seg000:002A loc_1002A:				    ; CODE XREF: start+6j
seg000:002A		    mov	    di,	seg dseg
seg000:002D		    mov	    si,	ds:2
seg000:0031		    sub	    si,	di
seg000:0033		    cmp	    si,	1000h
seg000:0037		    jb	    short loc_1003C
seg000:0039		    mov	    si,	1000h
seg000:003C
seg000:003C loc_1003C:				    ; CODE XREF: start+17j
seg000:003C		    cli
seg000:003D		    mov	    ss,	di
seg000:003F		    assume ss:dseg
seg000:003F
seg000:003F loc_1003F:
seg000:003F		    add	    sp,	97Eh
seg000:0043		    sti
seg000:0044		    jnb	    short loc_10056
seg000:0046		    push    ss
seg000:0047		    pop	    ds
seg000:0048		    assume ds:dseg
seg000:0048		    call    __FF_MSGBANNER
seg000:004B		    xor	    ax,	ax
seg000:004D		    push    ax
seg000:004E		    call    __NMSG_WRITE
seg000:0051		    mov	    ax,	4CFFh
seg000:0054		    int	    21h		    ; DOS - 2+ - QUIT WITH EXIT	CODE (EXIT)
seg000:0054					    ; AL = exit	code
seg000:0056 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0056
seg000:0056 loc_10056:				    ; CODE XREF: start+24j
seg000:0056		    and	    sp,	0FFFEh
seg000:0059		    mov	    ss:word_11748, sp
seg000:005E		    mov	    ss:word_11744, sp
seg000:0063		    mov	    ax,	si
seg000:0065		    mov	    cl,	4
seg000:0067		    shl	    ax,	cl
seg000:0069		    dec	    ax
seg000:006A		    mov	    ss:word_11742, ax
seg000:006E		    add	    si,	di
seg000:0070		    mov	    word_116F2,	si
seg000:0074		    mov	    bx,	es
seg000:0076		    sub	    bx,	si
seg000:0078		    neg	    bx
seg000:007A		    mov	    ah,	4Ah
seg000:007C		    int	    21h		    ; DOS - 2+ - ADJUST	MEMORY BLOCK SIZE (SETBLOCK)
seg000:007C					    ; ES = segment address of block to change
seg000:007C					    ; BX = new size in paragraphs
seg000:007E		    mov	    ss:word_117B9, ds
seg000:0083		    push    ss
seg000:0084		    pop	    es
seg000:0085		    assume es:dseg
seg000:0085		    cld
seg000:0086		    mov	    di,	354h
seg000:0089		    mov	    cx,	980h
seg000:008C		    sub	    cx,	di
seg000:008E		    xor	    ax,	ax
seg000:0090		    rep	stosb
seg000:0092		    push    ss
seg000:0093		    pop	    ds
seg000:0094		    call    __cinit
seg000:0097		    push    ss
seg000:0098		    pop	    ds
seg000:0099		    call    __setenvp
seg000:009C		    call    __setargv
seg000:009F		    xor	    bp,	bp
seg000:00A1		    push    word_117DA
seg000:00A5		    push    word_117D8
seg000:00A9		    push    word_117D6
seg000:00AD		    call    main
seg000:00B0		    push    ax
seg000:00B1		    call    _exit
seg000:00B4 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:00B4		    mov	    ax,	seg dseg
seg000:00B7		    mov	    ds,	ax
seg000:00B9		    mov	    ax,	3
seg000:00BC		    mov	    ss:off_11746, 196h
seg000:00C3
seg000:00C3 loc_100C3:				    ; CODE XREF: sub_10262+3j
seg000:00C3					    ; __chkstk+13j ...
seg000:00C3		    push    ax
seg000:00C4		    call    __FF_MSGBANNER
seg000:00C7		    call    __NMSG_WRITE
seg000:00CA		    mov	    ax,	0FFh
seg000:00CD		    push    ax
seg000:00CE		    call    off_11746
seg000:00CE start	    endp
seg000:00CE
seg000:00D2
seg000:00D2 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:00D2
seg000:00D2 ; Attributes: library function
seg000:00D2
seg000:00D2 __cinit	    proc near		    ; CODE XREF: start+74p
seg000:00D2		    mov	    ah,	30h
seg000:00D4		    int	    21h		    ; DOS - GET	DOS VERSION
seg000:00D4					    ; Return: AL = major version number	(00h for DOS 1.x)
seg000:00D6		    mov	    word_117BB,	ax
seg000:00D9		    mov	    ax,	3500h
seg000:00DC		    int	    21h		    ; DOS - 2+ - GET INTERRUPT VECTOR
seg000:00DC					    ; AL = interrupt number
seg000:00DC					    ; Return: ES:BX = value of interrupt vector
seg000:00DE		    mov	    word ptr dword_117A7, bx
seg000:00E2		    mov	    word ptr dword_117A7+2, es
seg000:00E6		    push    cs
seg000:00E7		    pop	    ds
seg000:00E8		    assume ds:seg000
seg000:00E8		    mov	    ax,	2500h
seg000:00EB		    mov	    dx,	0B4h ; '´'
seg000:00EE		    int	    21h		    ; DOS - SET	INTERRUPT VECTOR
seg000:00EE					    ; AL = interrupt number
seg000:00EE					    ; DS:DX = new vector to be used for	specified interrupt
seg000:00F0		    push    ss
seg000:00F1		    pop	    ds
seg000:00F2		    assume ds:dseg
seg000:00F2		    mov	    cx,	word_1195E
seg000:00F6		    jcxz    short loc_10126
seg000:00F8		    mov	    es,	word_117B9
seg000:00FC		    assume es:nothing
seg000:00FC		    mov	    si,	es:2Ch
seg000:0101		    lds	    ax,	dword_11960
seg000:0105		    mov	    dx,	ds
seg000:0107		    xor	    bx,	bx
seg000:0109		    call    dword ptr ss:unk_1195C
seg000:010E		    jnb	    short loc_10115
seg000:0110		    push    ss
seg000:0111		    pop	    ds
seg000:0112		    jmp	    sub_10262
seg000:0115 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0115
seg000:0115 loc_10115:				    ; CODE XREF: __cinit+3Cj
seg000:0115		    lds	    ax,	ss:dword_11964
seg000:011A		    mov	    dx,	ds
seg000:011C		    mov	    bx,	3
seg000:011F		    call    dword ptr ss:unk_1195C
seg000:0124		    push    ss
seg000:0125		    pop	    ds
seg000:0126
seg000:0126 loc_10126:				    ; CODE XREF: __cinit+24j
seg000:0126		    mov	    es,	word_117B9
seg000:012A		    mov	    cx,	es:2Ch
seg000:012F		    jcxz    short loc_10167
seg000:0131		    mov	    es,	cx
seg000:0133		    xor	    di,	di
seg000:0135
seg000:0135 loc_10135:				    ; CODE XREF: __cinit+7Cj
seg000:0135		    cmp	    byte ptr es:[di], 0
seg000:0139		    jz	    short loc_10167
seg000:013B		    mov	    cx,	0Ch
seg000:013E		    mov	    si,	0AAh ; 'ª'
seg000:0141		    repe cmpsb
seg000:0143		    jz	    short loc_10150
seg000:0145		    mov	    cx,	7FFFh
seg000:0148		    xor	    ax,	ax
seg000:014A		    repne scasb
seg000:014C		    jnz	    short loc_10167
seg000:014E		    jmp	    short loc_10135
seg000:0150 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0150
seg000:0150 loc_10150:				    ; CODE XREF: __cinit+71j
seg000:0150		    push    es
seg000:0151		    push    ds
seg000:0152		    pop	    es
seg000:0153		    assume es:dseg
seg000:0153		    pop	    ds
seg000:0154		    mov	    si,	di
seg000:0156		    mov	    di,	0D2h ; 'Ò'
seg000:0159		    lodsb
seg000:015A		    cbw
seg000:015B		    xchg    ax,	cx
seg000:015C
seg000:015C loc_1015C:				    ; CODE XREF: __cinit+91j
seg000:015C		    lodsb
seg000:015D		    inc	    al
seg000:015F		    jz	    short loc_10162
seg000:0161		    dec	    ax
seg000:0162
seg000:0162 loc_10162:				    ; CODE XREF: __cinit+8Dj
seg000:0162		    stosb
seg000:0163		    loop    loc_1015C
seg000:0165		    push    ss
seg000:0166		    pop	    ds
seg000:0167
seg000:0167 loc_10167:				    ; CODE XREF: __cinit+5Dj
seg000:0167					    ; __cinit+67j ...
seg000:0167		    mov	    bx,	4
seg000:016A
seg000:016A loc_1016A:				    ; CODE XREF: __cinit+AFj
seg000:016A		    and	    byte ptr [bx+0D2h],	0BFh
seg000:016F		    mov	    ax,	4400h
seg000:0172		    int	    21h		    ; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
seg000:0172					    ; BX = file	or device handle
seg000:0174		    jb	    short loc_10180
seg000:0176		    test    dl,	80h
seg000:0179		    jz	    short loc_10180
seg000:017B		    or	    byte ptr [bx+0D2h],	40h
seg000:0180
seg000:0180 loc_10180:				    ; CODE XREF: __cinit+A2j
seg000:0180					    ; __cinit+A7j
seg000:0180		    dec	    bx
seg000:0181		    jns	    short loc_1016A
seg000:0183		    mov	    si,	278h
seg000:0186		    mov	    di,	278h
seg000:0189		    call    sub_1022E
seg000:018C		    mov	    si,	278h
seg000:018F		    mov	    di,	278h
seg000:0192		    call    sub_1021F
seg000:0195		    retn
seg000:0195 __cinit	    endp
seg000:0195
seg000:0196
seg000:0196 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0196
seg000:0196 ; Attributes: library function noreturn bp-based frame
seg000:0196
seg000:0196 _exit	    proc near		    ; CODE XREF: start+91p
seg000:0196		    push    bp
seg000:0197		    mov	    bp,	sp
seg000:0199		    mov	    si,	37Ah
seg000:019C		    mov	    di,	37Ah
seg000:019F		    call    sub_1021F
seg000:01A2		    mov	    si,	278h
seg000:01A5		    mov	    di,	27Ah
seg000:01A8		    call    sub_1021F
seg000:01AB		    jmp	    short loc_101B0
seg000:01AB _exit	    endp
seg000:01AB
seg000:01AD
seg000:01AD ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:01AD
seg000:01AD ; Attributes: library function noreturn bp-based frame
seg000:01AD
seg000:01AD __exit	    proc near		    ; CODE XREF: start+AEp
seg000:01AD					    ; DATA XREF: dseg:off_11746o
seg000:01AD
seg000:01AD arg_0	    = word ptr	4
seg000:01AD
seg000:01AD		    push    bp
seg000:01AE		    mov	    bp,	sp
seg000:01B0
seg000:01B0 loc_101B0:				    ; CODE XREF: _exit+15j
seg000:01B0		    mov	    si,	27Ah
seg000:01B3		    mov	    di,	27Ah
seg000:01B6		    call    sub_1021F
seg000:01B9		    mov	    si,	27Ah
seg000:01BC		    mov	    di,	27Ah
seg000:01BF		    call    sub_1022E
seg000:01C2		    call    __nullcheck
seg000:01C5		    or	    ax,	ax
seg000:01C7		    jz	    short loc_101D4
seg000:01C9		    cmp	    [bp+arg_0],	0
seg000:01CD		    jnz	    short loc_101D4
seg000:01CF		    mov	    [bp+arg_0],	0FFh
seg000:01D4
seg000:01D4 loc_101D4:				    ; CODE XREF: __exit+1Aj
seg000:01D4					    ; __exit+20j
seg000:01D4		    mov	    cx,	0Fh
seg000:01D7		    mov	    bx,	5
seg000:01DA
seg000:01DA loc_101DA:				    ; CODE XREF: __exit+39j
seg000:01DA		    test    byte ptr [bx+0D2h],	1
seg000:01DF		    jz	    short loc_101E5
seg000:01E1		    mov	    ah,	3Eh
seg000:01E3		    int	    21h		    ; DOS - 2+ - CLOSE A FILE WITH HANDLE
seg000:01E3					    ; BX = file	handle
seg000:01E5
seg000:01E5 loc_101E5:				    ; CODE XREF: __exit+32j
seg000:01E5		    inc	    bx
seg000:01E6		    loop    loc_101DA
seg000:01E8		    call    __ctermsub
seg000:01EB		    mov	    ax,	[bp+arg_0]
seg000:01EE		    mov	    ah,	4Ch
seg000:01F0		    int	    21h		    ; DOS - 2+ - QUIT WITH EXIT	CODE (EXIT)
seg000:01F0 __exit	    endp		    ; AL = exit	code
seg000:01F0
seg000:01F2
seg000:01F2 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:01F2
seg000:01F2 ; Attributes: library function
seg000:01F2
seg000:01F2 __ctermsub	    proc near		    ; CODE XREF: __exit+3Bp
seg000:01F2		    mov	    cx,	word_1195E
seg000:01F6		    jcxz    short loc_101FF
seg000:01F8		    mov	    bx,	2
seg000:01FB		    call    dword ptr unk_1195C
seg000:01FF
seg000:01FF loc_101FF:				    ; CODE XREF: __ctermsub+4j
seg000:01FF		    push    ds
seg000:0200		    lds	    dx,	dword_117A7
seg000:0204		    mov	    ax,	2500h
seg000:0207		    int	    21h		    ; DOS - SET	INTERRUPT VECTOR
seg000:0207					    ; AL = interrupt number
seg000:0207					    ; DS:DX = new vector to be used for	specified interrupt
seg000:0209		    pop	    ds
seg000:020A		    cmp	    byte_117E4,	0
seg000:020F		    jz	    short locret_1021E
seg000:0211		    push    ds
seg000:0212		    mov	    al,	byte_117E5
seg000:0215		    lds	    dx,	dword_117E6
seg000:0219		    mov	    ah,	25h
seg000:021B		    int	    21h		    ; DOS - SET	INTERRUPT VECTOR
seg000:021B					    ; AL = interrupt number
seg000:021B					    ; DS:DX = new vector to be used for	specified interrupt
seg000:021D		    pop	    ds
seg000:021E
seg000:021E locret_1021E:			    ; CODE XREF: __ctermsub+1Dj
seg000:021E		    retn
seg000:021E __ctermsub	    endp
seg000:021E
seg000:021F
seg000:021F ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:021F
seg000:021F ; Attributes: library function
seg000:021F
seg000:021F sub_1021F	    proc near		    ; CODE XREF: __cinit+C0p
seg000:021F					    ; _exit+9p	...
seg000:021F		    cmp	    si,	di
seg000:0221		    jnb	    short locret_1022D
seg000:0223		    dec	    di
seg000:0224		    dec	    di
seg000:0225		    mov	    cx,	[di]
seg000:0227		    jcxz    short sub_1021F
seg000:0229		    call    cx
seg000:022B		    jmp	    short sub_1021F
seg000:022D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:022D
seg000:022D locret_1022D:			    ; CODE XREF: sub_1021F+2j
seg000:022D		    retn
seg000:022D sub_1021F	    endp
seg000:022D
seg000:022E
seg000:022E ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:022E
seg000:022E ; Attributes: library function
seg000:022E
seg000:022E sub_1022E	    proc near		    ; CODE XREF: __cinit+B7p
seg000:022E					    ; __exit+12p ...
seg000:022E		    cmp	    si,	di
seg000:0230		    jnb	    short locret_10240
seg000:0232		    sub	    di,	4
seg000:0235		    mov	    ax,	[di]
seg000:0237		    or	    ax,	[di+2]
seg000:023A		    jz	    short sub_1022E
seg000:023C		    call    dword ptr [di]
seg000:023E		    jmp	    short sub_1022E
seg000:0240 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0240
seg000:0240 locret_10240:			    ; CODE XREF: sub_1022E+2j
seg000:0240		    retn
seg000:0240 sub_1022E	    endp
seg000:0240
seg000:0240 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0241		    align 2
seg000:0242
seg000:0242 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0242
seg000:0242 ; Attributes: library function bp-based frame
seg000:0242
seg000:0242 __FF_MSGBANNER  proc near		    ; CODE XREF: start+28p
seg000:0242					    ; start+A4p ...
seg000:0242		    push    bp
seg000:0243		    mov	    bp,	sp
seg000:0245		    mov	    ax,	0FCh ; 'ü'
seg000:0248		    push    ax
seg000:0249		    call    __NMSG_WRITE
seg000:024C		    cmp	    word_117EA,	0
seg000:0251		    jz	    short loc_10257
seg000:0253		    call    word_117EA
seg000:0257
seg000:0257 loc_10257:				    ; CODE XREF: __FF_MSGBANNER+Fj
seg000:0257		    mov	    ax,	0FFh
seg000:025A		    push    ax
seg000:025B		    call    __NMSG_WRITE
seg000:025E		    mov	    sp,	bp
seg000:0260		    pop	    bp
seg000:0261		    retn
seg000:0261 __FF_MSGBANNER  endp
seg000:0261
seg000:0262
seg000:0262 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0262
seg000:0262
seg000:0262 sub_10262	    proc near		    ; CODE XREF: __cinit+40j
seg000:0262					    ; fprint+53p ...
seg000:0262		    mov	    ax,	2
seg000:0265		    jmp	    loc_100C3
seg000:0265 sub_10262	    endp
seg000:0265
seg000:0268
seg000:0268 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0268
seg000:0268 ; Attributes: library function
seg000:0268
seg000:0268 __chkstk	    proc near		    ; CODE XREF: main+2p
seg000:0268					    ; __output+6p
seg000:0268		    pop	    cx
seg000:0269		    mov	    bx,	sp
seg000:026B		    sub	    bx,	ax
seg000:026D		    jb	    short loc_10279
seg000:026F		    cmp	    bx,	word_117EC
seg000:0273		    jb	    short loc_10279
seg000:0275		    mov	    sp,	bx
seg000:0277		    jmp	    cx
seg000:0279 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0279
seg000:0279 loc_10279:				    ; CODE XREF: __chkstk+5j
seg000:0279					    ; __chkstk+Bj
seg000:0279		    xor	    ax,	ax
seg000:027B		    jmp	    loc_100C3
seg000:027B __chkstk	    endp
seg000:027B
seg000:027E
seg000:027E ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:027E
seg000:027E ; Attributes: library function
seg000:027E
seg000:027E __nullcheck	    proc near		    ; CODE XREF: __exit+15p
seg000:027E		    push    si
seg000:027F		    xor	    si,	si
seg000:0281		    mov	    cx,	42h ; 'B'
seg000:0284		    xor	    ah,	ah
seg000:0286		    cld
seg000:0287
seg000:0287 loc_10287:				    ; CODE XREF: __nullcheck+Cj
seg000:0287		    lodsb
seg000:0288		    xor	    ah,	al
seg000:028A		    loop    loc_10287
seg000:028C		    xor	    ah,	55h
seg000:028F		    jz	    short loc_1029E
seg000:0291		    call    __FF_MSGBANNER
seg000:0294		    mov	    ax,	1
seg000:0297		    push    ax
seg000:0298		    call    __NMSG_WRITE
seg000:029B		    mov	    ax,	1
seg000:029E
seg000:029E loc_1029E:				    ; CODE XREF: __nullcheck+11j
seg000:029E		    pop	    si
seg000:029F		    retn
seg000:029F __nullcheck	    endp
seg000:029F
seg000:02A0
seg000:02A0 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:02A0
seg000:02A0 ; Attributes: library function
seg000:02A0
seg000:02A0 __setargv	    proc near		    ; CODE XREF: start+7Cp
seg000:02A0		    pop	    word_117EE
seg000:02A4		    mov	    dx,	2
seg000:02A7		    cmp	    byte ptr word_117BB, dl
seg000:02AB		    jz	    short loc_102D6
seg000:02AD		    mov	    es,	word_117B9
seg000:02B1		    assume es:nothing
seg000:02B1		    mov	    es,	word ptr es:2Ch
seg000:02B6		    mov	    seg_117DE, es
seg000:02BA		    xor	    ax,	ax
seg000:02BC		    cwd
seg000:02BD		    mov	    cx,	8000h
seg000:02C0		    xor	    di,	di
seg000:02C2
seg000:02C2 loc_102C2:				    ; CODE XREF: __setargv+25j
seg000:02C2		    repne scasb
seg000:02C4		    scasb
seg000:02C5		    jnz	    short loc_102C2
seg000:02C7		    inc	    di
seg000:02C8		    inc	    di
seg000:02C9		    mov	    word_117DC,	di
seg000:02CD		    mov	    cx,	0FFFFh
seg000:02D0		    repne scasb
seg000:02D2		    not	    cx
seg000:02D4		    mov	    dx,	cx
seg000:02D6
seg000:02D6 loc_102D6:				    ; CODE XREF: __setargv+Bj
seg000:02D6		    mov	    di,	1
seg000:02D9		    mov	    si,	81h ; ''
seg000:02DC		    mov	    ds,	word_117B9
seg000:02E0
seg000:02E0 loc_102E0:				    ; CODE XREF: __setargv+43j
seg000:02E0					    ; __setargv+47j ...
seg000:02E0		    lodsb
seg000:02E1		    cmp	    al,	20h ; ' '
seg000:02E3		    jz	    short loc_102E0
seg000:02E5		    cmp	    al,	9
seg000:02E7		    jz	    short loc_102E0
seg000:02E9		    cmp	    al,	0Dh
seg000:02EB		    jz	    short loc_1035C
seg000:02ED		    or	    al,	al
seg000:02EF		    jz	    short loc_1035C
seg000:02F1		    inc	    di
seg000:02F2
seg000:02F2 loc_102F2:				    ; CODE XREF: __setargv+7Dj
seg000:02F2		    dec	    si
seg000:02F3
seg000:02F3 loc_102F3:				    ; CODE XREF: __setargv+6Dj
seg000:02F3					    ; __setargv+87j ...
seg000:02F3		    lodsb
seg000:02F4		    cmp	    al,	20h ; ' '
seg000:02F6		    jz	    short loc_102E0
seg000:02F8		    cmp	    al,	9
seg000:02FA		    jz	    short loc_102E0
seg000:02FC		    cmp	    al,	0Dh
seg000:02FE		    jz	    short loc_1035C
seg000:0300		    or	    al,	al
seg000:0302		    jz	    short loc_1035C
seg000:0304		    cmp	    al,	22h ; '"'
seg000:0306		    jz	    short loc_1032C
seg000:0308		    cmp	    al,	5Ch ; '\'
seg000:030A		    jz	    short loc_1030F
seg000:030C		    inc	    dx
seg000:030D		    jmp	    short loc_102F3
seg000:030F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:030F
seg000:030F loc_1030F:				    ; CODE XREF: __setargv+6Aj
seg000:030F		    xor	    cx,	cx
seg000:0311
seg000:0311 loc_10311:				    ; CODE XREF: __setargv+75j
seg000:0311		    inc	    cx
seg000:0312		    lodsb
seg000:0313		    cmp	    al,	5Ch ; '\'
seg000:0315		    jz	    short loc_10311
seg000:0317		    cmp	    al,	22h ; '"'
seg000:0319		    jz	    short loc_1031F
seg000:031B		    add	    dx,	cx
seg000:031D		    jmp	    short loc_102F2
seg000:031F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:031F
seg000:031F loc_1031F:				    ; CODE XREF: __setargv+79j
seg000:031F		    mov	    ax,	cx
seg000:0321		    shr	    cx,	1
seg000:0323		    adc	    dx,	cx
seg000:0325		    test    al,	1
seg000:0327		    jnz	    short loc_102F3
seg000:0329		    jmp	    short loc_1032C
seg000:032B ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:032B
seg000:032B loc_1032B:				    ; CODE XREF: __setargv+AEj
seg000:032B		    dec	    si
seg000:032C
seg000:032C loc_1032C:				    ; CODE XREF: __setargv+66j
seg000:032C					    ; __setargv+89j ...
seg000:032C		    lodsb
seg000:032D		    cmp	    al,	0Dh
seg000:032F		    jz	    short loc_1035C
seg000:0331		    or	    al,	al
seg000:0333		    jz	    short loc_1035C
seg000:0335		    cmp	    al,	22h ; '"'
seg000:0337		    jz	    short loc_102F3
seg000:0339		    cmp	    al,	5Ch ; '\'
seg000:033B		    jz	    short loc_10340
seg000:033D		    inc	    dx
seg000:033E		    jmp	    short loc_1032C
seg000:0340 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0340
seg000:0340 loc_10340:				    ; CODE XREF: __setargv+9Bj
seg000:0340		    xor	    cx,	cx
seg000:0342
seg000:0342 loc_10342:				    ; CODE XREF: __setargv+A6j
seg000:0342		    inc	    cx
seg000:0343		    lodsb
seg000:0344		    cmp	    al,	5Ch ; '\'
seg000:0346		    jz	    short loc_10342
seg000:0348		    cmp	    al,	22h ; '"'
seg000:034A		    jz	    short loc_10350
seg000:034C		    add	    dx,	cx
seg000:034E		    jmp	    short loc_1032B
seg000:0350 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0350
seg000:0350 loc_10350:				    ; CODE XREF: __setargv+AAj
seg000:0350		    mov	    ax,	cx
seg000:0352		    shr	    cx,	1
seg000:0354		    adc	    dx,	cx
seg000:0356		    test    al,	1
seg000:0358		    jnz	    short loc_1032C
seg000:035A		    jmp	    short loc_102F3
seg000:035C ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:035C
seg000:035C loc_1035C:				    ; CODE XREF: __setargv+4Bj
seg000:035C					    ; __setargv+4Fj ...
seg000:035C		    push    ss
seg000:035D		    pop	    ds
seg000:035E		    mov	    word_117D6,	di
seg000:0362		    add	    dx,	di
seg000:0364		    inc	    di
seg000:0365		    shl	    di,	1
seg000:0367		    add	    dx,	di
seg000:0369		    and	    dl,	0FEh
seg000:036C		    sub	    sp,	dx
seg000:036E		    mov	    ax,	sp
seg000:0370		    mov	    word_117D8,	ax
seg000:0373		    mov	    bx,	ax
seg000:0375		    add	    di,	bx
seg000:0377		    push    ss
seg000:0378		    pop	    es
seg000:0379		    assume es:dseg
seg000:0379		    mov	    ss:[bx], di
seg000:037C		    inc	    bx
seg000:037D		    inc	    bx
seg000:037E		    lds	    si,	dword ptr word_117DC
seg000:0382
seg000:0382 loc_10382:				    ; CODE XREF: __setargv+E6j
seg000:0382		    lodsb
seg000:0383		    stosb
seg000:0384		    or	    al,	al
seg000:0386		    jnz	    short loc_10382
seg000:0388		    mov	    si,	81h ; ''
seg000:038B		    mov	    ds,	ss:word_117B9
seg000:0390		    jmp	    short loc_10395
seg000:0392 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0392
seg000:0392 loc_10392:				    ; CODE XREF: __setargv+115j
seg000:0392					    ; __setargv+119j
seg000:0392		    xor	    ax,	ax
seg000:0394		    stosb
seg000:0395
seg000:0395 loc_10395:				    ; CODE XREF: __setargv+F0j
seg000:0395					    ; __setargv+F8j ...
seg000:0395		    lodsb
seg000:0396		    cmp	    al,	20h ; ' '
seg000:0398		    jz	    short loc_10395
seg000:039A		    cmp	    al,	9
seg000:039C		    jz	    short loc_10395
seg000:039E		    cmp	    al,	0Dh
seg000:03A0		    jnz	    short loc_103A5
seg000:03A2		    jmp	    loc_10424
seg000:03A5 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:03A5
seg000:03A5 loc_103A5:				    ; CODE XREF: __setargv+100j
seg000:03A5		    or	    al,	al
seg000:03A7		    jnz	    short loc_103AC
seg000:03A9		    jmp	    short loc_10424
seg000:03A9 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:03AB		    align 2
seg000:03AC
seg000:03AC loc_103AC:				    ; CODE XREF: __setargv+107j
seg000:03AC		    mov	    ss:[bx], di
seg000:03AF		    inc	    bx
seg000:03B0		    inc	    bx
seg000:03B1
seg000:03B1 loc_103B1:				    ; CODE XREF: __setargv+13Ej
seg000:03B1		    dec	    si
seg000:03B2
seg000:03B2 loc_103B2:				    ; CODE XREF: __setargv+12Cj
seg000:03B2					    ; __setargv+14Bj ...
seg000:03B2		    lodsb
seg000:03B3		    cmp	    al,	20h ; ' '
seg000:03B5		    jz	    short loc_10392
seg000:03B7		    cmp	    al,	9
seg000:03B9		    jz	    short loc_10392
seg000:03BB		    cmp	    al,	0Dh
seg000:03BD		    jz	    short loc_10421
seg000:03BF		    or	    al,	al
seg000:03C1		    jz	    short loc_10421
seg000:03C3		    cmp	    al,	22h ; '"'
seg000:03C5		    jz	    short loc_103EE
seg000:03C7		    cmp	    al,	5Ch ; '\'
seg000:03C9		    jz	    short loc_103CE
seg000:03CB		    stosb
seg000:03CC		    jmp	    short loc_103B2
seg000:03CE ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:03CE
seg000:03CE loc_103CE:				    ; CODE XREF: __setargv+129j
seg000:03CE		    xor	    cx,	cx
seg000:03D0
seg000:03D0 loc_103D0:				    ; CODE XREF: __setargv+134j
seg000:03D0		    inc	    cx
seg000:03D1		    lodsb
seg000:03D2		    cmp	    al,	5Ch ; '\'
seg000:03D4		    jz	    short loc_103D0
seg000:03D6		    cmp	    al,	22h ; '"'
seg000:03D8		    jz	    short loc_103E0
seg000:03DA		    mov	    al,	5Ch ; '\'
seg000:03DC		    rep	stosb
seg000:03DE		    jmp	    short loc_103B1
seg000:03E0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:03E0
seg000:03E0 loc_103E0:				    ; CODE XREF: __setargv+138j
seg000:03E0		    mov	    al,	5Ch ; '\'
seg000:03E2		    shr	    cx,	1
seg000:03E4		    rep	stosb
seg000:03E6		    jnb	    short loc_103EE
seg000:03E8		    mov	    al,	22h ; '"'
seg000:03EA		    stosb
seg000:03EB		    jmp	    short loc_103B2
seg000:03ED ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:03ED
seg000:03ED loc_103ED:				    ; CODE XREF: __setargv+172j
seg000:03ED		    dec	    si
seg000:03EE
seg000:03EE loc_103EE:				    ; CODE XREF: __setargv+125j
seg000:03EE					    ; __setargv+146j ...
seg000:03EE		    lodsb
seg000:03EF		    cmp	    al,	0Dh
seg000:03F1		    jz	    short loc_10421
seg000:03F3		    or	    al,	al
seg000:03F5		    jz	    short loc_10421
seg000:03F7		    cmp	    al,	22h ; '"'
seg000:03F9		    jz	    short loc_103B2
seg000:03FB		    cmp	    al,	5Ch ; '\'
seg000:03FD		    jz	    short loc_10402
seg000:03FF		    stosb
seg000:0400		    jmp	    short loc_103EE
seg000:0402 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0402
seg000:0402 loc_10402:				    ; CODE XREF: __setargv+15Dj
seg000:0402		    xor	    cx,	cx
seg000:0404
seg000:0404 loc_10404:				    ; CODE XREF: __setargv+168j
seg000:0404		    inc	    cx
seg000:0405		    lodsb
seg000:0406		    cmp	    al,	5Ch ; '\'
seg000:0408		    jz	    short loc_10404
seg000:040A		    cmp	    al,	22h ; '"'
seg000:040C		    jz	    short loc_10414
seg000:040E		    mov	    al,	5Ch ; '\'
seg000:0410		    rep	stosb
seg000:0412		    jmp	    short loc_103ED
seg000:0414 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0414
seg000:0414 loc_10414:				    ; CODE XREF: __setargv+16Cj
seg000:0414		    mov	    al,	5Ch ; '\'
seg000:0416		    shr	    cx,	1
seg000:0418		    rep	stosb
seg000:041A		    jnb	    short loc_103B2
seg000:041C		    mov	    al,	22h ; '"'
seg000:041E		    stosb
seg000:041F		    jmp	    short loc_103EE
seg000:0421 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0421
seg000:0421 loc_10421:				    ; CODE XREF: __setargv+11Dj
seg000:0421					    ; __setargv+121j ...
seg000:0421		    xor	    ax,	ax
seg000:0423		    stosb
seg000:0424
seg000:0424 loc_10424:				    ; CODE XREF: __setargv+102j
seg000:0424					    ; __setargv+109j
seg000:0424		    push    ss
seg000:0425		    pop	    ds
seg000:0426		    mov	    word ptr [bx], 0
seg000:042A		    jmp	    word_117EE
seg000:042A __setargv	    endp
seg000:042A
seg000:042E
seg000:042E ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:042E
seg000:042E ; Attributes: library function bp-based frame
seg000:042E
seg000:042E __setenvp	    proc near		    ; CODE XREF: start+79p
seg000:042E		    push    bp
seg000:042F		    mov	    bp,	sp
seg000:0431		    push    bp
seg000:0432		    mov	    ds,	word_117B9
seg000:0436		    xor	    cx,	cx
seg000:0438		    mov	    ax,	cx
seg000:043A		    mov	    bp,	cx
seg000:043C		    mov	    di,	cx
seg000:043E		    dec	    cx
seg000:043F		    mov	    si,	word ptr aMsRunTimeLibra+24h
seg000:0443		    or	    si,	si
seg000:0445		    jz	    short loc_10457
seg000:0447		    mov	    es,	si
seg000:0449		    assume es:nothing
seg000:0449		    cmp	    byte ptr es:0, 0
seg000:044F		    jz	    short loc_10457
seg000:0451
seg000:0451 loc_10451:				    ; CODE XREF: __setenvp+27j
seg000:0451		    repne scasb
seg000:0453		    inc	    bp
seg000:0454		    scasb
seg000:0455		    jnz	    short loc_10451
seg000:0457
seg000:0457 loc_10457:				    ; CODE XREF: __setenvp+17j
seg000:0457					    ; __setenvp+21j
seg000:0457		    inc	    bp
seg000:0458		    xchg    ax,	di
seg000:0459		    inc	    ax
seg000:045A		    and	    al,	0FEh
seg000:045C		    mov	    di,	bp
seg000:045E		    shl	    bp,	1
seg000:0460		    add	    ax,	bp
seg000:0462		    push    ss
seg000:0463		    pop	    ds
seg000:0464		    push    di
seg000:0465		    mov	    di,	9
seg000:0468		    call    __myalloc
seg000:046B		    pop	    di
seg000:046C		    mov	    cx,	di
seg000:046E		    mov	    di,	bp
seg000:0470		    add	    di,	ax
seg000:0472		    mov	    word_117DA,	bp
seg000:0476		    push    ds
seg000:0477		    pop	    es
seg000:0478		    assume es:dseg
seg000:0478		    mov	    ds,	si
seg000:047A		    xor	    si,	si
seg000:047C		    dec	    cx
seg000:047D		    jcxz    short loc_10492
seg000:047F
seg000:047F loc_1047F:				    ; CODE XREF: __setenvp+62j
seg000:047F		    cmp	    word ptr [si], 433Bh
seg000:0483		    jz	    short loc_1048A
seg000:0485		    mov	    [bp+0], di
seg000:0488		    inc	    bp
seg000:0489		    inc	    bp
seg000:048A
seg000:048A loc_1048A:				    ; CODE XREF: __setenvp+55j
seg000:048A					    ; __setenvp+60j
seg000:048A		    lodsb
seg000:048B		    stosb
seg000:048C		    or	    al,	al
seg000:048E		    jnz	    short loc_1048A
seg000:0490		    loop    loc_1047F
seg000:0492
seg000:0492 loc_10492:				    ; CODE XREF: __setenvp+4Fj
seg000:0492		    mov	    [bp+0], cx
seg000:0495		    push    ss
seg000:0496		    pop	    ds
seg000:0497		    pop	    bp
seg000:0498		    mov	    sp,	bp
seg000:049A		    pop	    bp
seg000:049B		    retn
seg000:049B __setenvp	    endp
seg000:049B
seg000:049C
seg000:049C ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:049C
seg000:049C ; Attributes: library function bp-based frame
seg000:049C
seg000:049C __NMSG_TEXT	    proc near		    ; CODE XREF: __NMSG_WRITE+7p
seg000:049C
seg000:049C arg_0	    = word ptr	4
seg000:049C
seg000:049C		    push    bp
seg000:049D		    mov	    bp,	sp
seg000:049F		    push    si
seg000:04A0		    push    di
seg000:04A1		    push    ds
seg000:04A2		    pop	    es
seg000:04A3		    mov	    dx,	[bp+arg_0]
seg000:04A6		    mov	    si,	282h
seg000:04A9
seg000:04A9 loc_104A9:				    ; CODE XREF: __NMSG_TEXT+20j
seg000:04A9		    lodsw
seg000:04AA		    cmp	    ax,	dx
seg000:04AC		    jz	    short loc_104BE
seg000:04AE		    inc	    ax
seg000:04AF		    xchg    ax,	si
seg000:04B0		    jz	    short loc_104BE
seg000:04B2		    xchg    ax,	di
seg000:04B3		    xor	    ax,	ax
seg000:04B5		    mov	    cx,	0FFFFh
seg000:04B8		    repne scasb
seg000:04BA		    mov	    si,	di
seg000:04BC		    jmp	    short loc_104A9
seg000:04BE ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:04BE
seg000:04BE loc_104BE:				    ; CODE XREF: __NMSG_TEXT+10j
seg000:04BE					    ; __NMSG_TEXT+14j
seg000:04BE		    xchg    ax,	si
seg000:04BF		    pop	    di
seg000:04C0		    pop	    si
seg000:04C1		    mov	    sp,	bp
seg000:04C3		    pop	    bp
seg000:04C4		    retn    2
seg000:04C4 __NMSG_TEXT	    endp
seg000:04C4
seg000:04C7
seg000:04C7 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:04C7
seg000:04C7 ; Attributes: library function bp-based frame
seg000:04C7
seg000:04C7 __NMSG_WRITE    proc near		    ; CODE XREF: start+2Ep
seg000:04C7					    ; start+A7p ...
seg000:04C7
seg000:04C7 arg_0	    = word ptr	4
seg000:04C7
seg000:04C7		    push    bp
seg000:04C8		    mov	    bp,	sp
seg000:04CA		    push    di
seg000:04CB		    push    [bp+arg_0]
seg000:04CE		    call    __NMSG_TEXT
seg000:04D1		    or	    ax,	ax
seg000:04D3		    jz	    short loc_104E9
seg000:04D5		    xchg    ax,	dx
seg000:04D6		    mov	    di,	dx
seg000:04D8		    xor	    ax,	ax
seg000:04DA		    mov	    cx,	0FFFFh
seg000:04DD		    repne scasb
seg000:04DF		    not	    cx
seg000:04E1		    dec	    cx
seg000:04E2		    mov	    bx,	2
seg000:04E5		    mov	    ah,	40h
seg000:04E7		    int	    21h		    ; DOS - 2+ - WRITE TO FILE WITH HANDLE
seg000:04E7					    ; BX = file	handle,	CX = number of bytes to	write, DS:DX ->	buffer
seg000:04E9
seg000:04E9 loc_104E9:				    ; CODE XREF: __NMSG_WRITE+Cj
seg000:04E9		    pop	    di
seg000:04EA		    mov	    sp,	bp
seg000:04EC		    pop	    bp
seg000:04ED		    retn    2
seg000:04ED __NMSG_WRITE    endp
seg000:04ED
seg000:04F0
seg000:04F0 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:04F0
seg000:04F0 ; Attributes: library function
seg000:04F0
seg000:04F0 __myalloc	    proc near		    ; CODE XREF: __setenvp+3Ap
seg000:04F0		    mov	    dx,	ax
seg000:04F2		    add	    ax,	word_11748
seg000:04F6		    jb	    short loc_1052D
seg000:04F8		    cmp	    word_11742,	ax
seg000:04FC		    jnb	    short loc_10523
seg000:04FE		    add	    ax,	0Fh
seg000:0501		    push    ax
seg000:0502		    rcr	    ax,	1
seg000:0504		    mov	    cl,	3
seg000:0506		    shr	    ax,	cl
seg000:0508		    mov	    cx,	ds
seg000:050A		    mov	    bx,	word_117B9
seg000:050E		    sub	    cx,	bx
seg000:0510		    add	    ax,	cx
seg000:0512		    mov	    es,	bx
seg000:0514		    assume es:nothing
seg000:0514		    mov	    bx,	ax
seg000:0516		    mov	    ah,	4Ah
seg000:0518		    int	    21h		    ; DOS - 2+ - ADJUST	MEMORY BLOCK SIZE (SETBLOCK)
seg000:0518					    ; ES = segment address of block to change
seg000:0518					    ; BX = new size in paragraphs
seg000:051A		    pop	    ax
seg000:051B		    jb	    short loc_1052D
seg000:051D		    and	    al,	0F0h
seg000:051F		    dec	    ax
seg000:0520		    mov	    word_11742,	ax
seg000:0523
seg000:0523 loc_10523:				    ; CODE XREF: __myalloc+Cj
seg000:0523		    xchg    ax,	bp
seg000:0524		    mov	    bp,	word_11748
seg000:0528		    add	    word_11748,	dx
seg000:052C		    retn
seg000:052D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:052D
seg000:052D loc_1052D:				    ; CODE XREF: __myalloc+6j
seg000:052D					    ; __myalloc+2Bj
seg000:052D		    mov	    ax,	di
seg000:052F		    jmp	    loc_100C3
seg000:052F __myalloc	    endp
seg000:052F
seg000:0532
seg000:0532 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0532
seg000:0532 ; Attributes: library function
seg000:0532
seg000:0532 __dosret0	    proc near
seg000:0532		    jb	    short loc_10547
seg000:0534
seg000:0534 loc_10534:				    ; CODE XREF: __dosreturnj
seg000:0534		    xor	    ax,	ax
seg000:0536		    mov	    sp,	bp
seg000:0538		    pop	    bp
seg000:0539		    retn
seg000:0539 __dosret0	    endp ; sp =	 2
seg000:0539
seg000:053A
seg000:053A ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:053A
seg000:053A ; Attributes: library function
seg000:053A
seg000:053A __dosreturn	    proc near
seg000:053A		    jnb	    short loc_10534
seg000:053C		    push    ax
seg000:053D		    call    sub_10558
seg000:0540		    pop	    ax
seg000:0541		    mov	    sp,	bp
seg000:0543		    pop	    bp
seg000:0544		    retn
seg000:0544 __dosreturn	    endp ; sp =	 2
seg000:0544
seg000:0545 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0545 ; START OF FUNCTION	CHUNK FOR _lseek
seg000:0545
seg000:0545 __dosretax:				    ; CODE XREF: _lseek:loc_1127Dj
seg000:0545					    ; _write:loc_11293j ...
seg000:0545		    jnb	    short loc_1054E
seg000:0547
seg000:0547 loc_10547:				    ; CODE XREF: __dosret0j
seg000:0547		    call    sub_10558
seg000:054A		    mov	    ax,	0FFFFh
seg000:054D		    cwd
seg000:054E
seg000:054E loc_1054E:				    ; CODE XREF: _lseek:__dosretaxj
seg000:054E		    mov	    sp,	bp
seg000:0550		    pop	    bp
seg000:0551		    retn
seg000:0551 ; END OF FUNCTION CHUNK FOR	_lseek
seg000:0552
seg000:0552 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0552
seg000:0552 ; Attributes: library function
seg000:0552
seg000:0552 __maperror	    proc near
seg000:0552		    xor	    ah,	ah
seg000:0554		    call    sub_10558
seg000:0557		    retn
seg000:0557 __maperror	    endp
seg000:0557
seg000:0558
seg000:0558 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0558
seg000:0558
seg000:0558 sub_10558	    proc near		    ; CODE XREF: __dosreturn+3p
seg000:0558					    ; _lseek:loc_10547p ...
seg000:0558		    mov	    byte_117BE,	al
seg000:055B		    or	    ah,	ah
seg000:055D		    jnz	    short loc_10582
seg000:055F		    cmp	    byte ptr word_117BB, 3
seg000:0564		    jb	    short loc_10573
seg000:0566		    cmp	    al,	22h ; '"'
seg000:0568		    jnb	    short loc_10577
seg000:056A		    cmp	    al,	20h ; ' '
seg000:056C		    jb	    short loc_10573
seg000:056E		    mov	    al,	5
seg000:0570		    jmp	    short loc_10579
seg000:0570 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0572		    db 90h
seg000:0573 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0573
seg000:0573 loc_10573:				    ; CODE XREF: sub_10558+Cj
seg000:0573					    ; sub_10558+14j
seg000:0573		    cmp	    al,	13h
seg000:0575		    jbe	    short loc_10579
seg000:0577
seg000:0577 loc_10577:				    ; CODE XREF: sub_10558+10j
seg000:0577		    mov	    al,	13h
seg000:0579
seg000:0579 loc_10579:				    ; CODE XREF: sub_10558+18j
seg000:0579					    ; sub_10558+1Dj
seg000:0579		    mov	    bx,	100h
seg000:057C		    xlat
seg000:057D
seg000:057D loc_1057D:				    ; CODE XREF: sub_10558+2Cj
seg000:057D		    cbw
seg000:057E		    mov	    word_117B3,	ax
seg000:0581		    retn
seg000:0582 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0582
seg000:0582 loc_10582:				    ; CODE XREF: sub_10558+5j
seg000:0582		    mov	    al,	ah
seg000:0584		    jmp	    short loc_1057D
seg000:0584 sub_10558	    endp
seg000:0584
seg000:0586
seg000:0586 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0586
seg000:0586 ; Attributes: library function bp-based frame
seg000:0586
seg000:0586 _flushall	    proc near
seg000:0586		    push    bp
seg000:0587		    mov	    bp,	sp
seg000:0589		    sub	    sp,	4
seg000:058C		    push    di
seg000:058D		    push    si
seg000:058E		    mov	    si,	116h
seg000:0591		    sub	    di,	di
seg000:0593		    jmp	    short loc_105AA
seg000:0593 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0595		    align 2
seg000:0596
seg000:0596 loc_10596:				    ; CODE XREF: _flushall+28j
seg000:0596		    test    byte ptr [si+6], 83h
seg000:059A		    jz	    short loc_105A7
seg000:059C		    push    si
seg000:059D		    call    _fflush
seg000:05A0		    add	    sp,	2
seg000:05A3		    inc	    ax
seg000:05A4		    jz	    short loc_105A7
seg000:05A6		    inc	    di
seg000:05A7
seg000:05A7 loc_105A7:				    ; CODE XREF: _flushall+14j
seg000:05A7					    ; _flushall+1Ej
seg000:05A7		    add	    si,	8
seg000:05AA
seg000:05AA loc_105AA:				    ; CODE XREF: _flushall+Dj
seg000:05AA		    cmp	    word_1191E,	si
seg000:05AE		    jnb	    short loc_10596
seg000:05B0		    mov	    ax,	di
seg000:05B2		    pop	    si
seg000:05B3		    pop	    di
seg000:05B4		    mov	    sp,	bp
seg000:05B6		    pop	    bp
seg000:05B7		    retn
seg000:05B7 _flushall	    endp
seg000:05B7
seg000:05B8
seg000:05B8 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:05B8
seg000:05B8 ; Attributes: library function bp-based frame
seg000:05B8
seg000:05B8 _printf	    proc near		    ; CODE XREF: main+9p
seg000:05B8
seg000:05B8 var_8	    = word ptr -8
seg000:05B8 var_4	    = word ptr -4
seg000:05B8 arg_0	    = word ptr	4
seg000:05B8 arg_2	    = word ptr	6
seg000:05B8
seg000:05B8		    push    bp
seg000:05B9		    mov	    bp,	sp
seg000:05BB		    sub	    sp,	8
seg000:05BE		    push    di
seg000:05BF		    push    si
seg000:05C0		    mov	    si,	11Eh
seg000:05C3		    lea	    ax,	[bp+arg_2]
seg000:05C6		    mov	    [bp+var_4],	ax
seg000:05C9		    push    si
seg000:05CA		    call    __stbuf
seg000:05CD		    add	    sp,	2
seg000:05D0		    mov	    di,	ax
seg000:05D2		    lea	    ax,	[bp+arg_2]
seg000:05D5		    push    ax
seg000:05D6		    push    [bp+arg_0]
seg000:05D9		    push    si
seg000:05DA		    call    __output
seg000:05DD		    add	    sp,	6
seg000:05E0		    mov	    [bp+var_8],	ax
seg000:05E3		    push    si
seg000:05E4		    push    di
seg000:05E5		    call    __ftbuf
seg000:05E8		    add	    sp,	4
seg000:05EB		    mov	    ax,	[bp+var_8]
seg000:05EE		    pop	    si
seg000:05EF		    pop	    di
seg000:05F0		    mov	    sp,	bp
seg000:05F2		    pop	    bp
seg000:05F3		    retn
seg000:05F3 _printf	    endp
seg000:05F3
seg000:05F4
seg000:05F4 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:05F4
seg000:05F4 ; Attributes: library function bp-based frame
seg000:05F4
seg000:05F4 __flsbuf	    proc near		    ; CODE XREF: _outc+26p
seg000:05F4					    ; putpad+20p ...
seg000:05F4
seg000:05F4 var_8	    = word ptr -8
seg000:05F4 var_6	    = word ptr -6
seg000:05F4 var_4	    = word ptr -4
seg000:05F4 arg_0	    = word ptr	4
seg000:05F4 arg_2	    = word ptr	6
seg000:05F4
seg000:05F4		    push    bp
seg000:05F5		    mov	    bp,	sp
seg000:05F7		    sub	    sp,	8
seg000:05FA		    push    di
seg000:05FB		    push    si
seg000:05FC		    mov	    si,	[bp+arg_2]
seg000:05FF		    mov	    al,	[si+7]
seg000:0602		    cbw
seg000:0603		    mov	    [bp+var_6],	ax
seg000:0606		    mov	    ax,	si
seg000:0608		    sub	    ax,	116h
seg000:060B		    mov	    cl,	3
seg000:060D		    sar	    ax,	cl
seg000:060F		    mov	    cx,	ax
seg000:0611		    shl	    ax,	1
seg000:0613		    add	    ax,	cx
seg000:0615		    shl	    ax,	1
seg000:0617		    add	    ax,	1B6h
seg000:061A		    mov	    [bp+var_8],	ax
seg000:061D		    test    byte ptr [si+6], 83h
seg000:0621		    jz	    short loc_10629
seg000:0623		    test    byte ptr [si+6], 40h
seg000:0627		    jz	    short loc_10634
seg000:0629
seg000:0629 loc_10629:				    ; CODE XREF: __flsbuf+2Dj
seg000:0629					    ; __flsbuf+44j ...
seg000:0629		    or	    byte ptr [si+6], 20h
seg000:062D		    mov	    ax,	0FFFFh
seg000:0630		    jmp	    loc_10743
seg000:0630 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0633		    align 2
seg000:0634
seg000:0634 loc_10634:				    ; CODE XREF: __flsbuf+33j
seg000:0634		    test    byte ptr [si+6], 1
seg000:0638		    jnz	    short loc_10629
seg000:063A		    or	    byte ptr [si+6], 2
seg000:063E		    and	    byte ptr [si+6], 0EFh
seg000:0642		    sub	    ax,	ax
seg000:0644		    mov	    [si+2], ax
seg000:0647		    mov	    di,	ax
seg000:0649		    mov	    [bp+var_4],	di
seg000:064C		    test    byte ptr [si+6], 0Ch
seg000:0650		    jnz	    short loc_106B1
seg000:0652		    mov	    bx,	si
seg000:0654		    sub	    bx,	116h
seg000:0658		    mov	    cl,	3
seg000:065A		    sar	    bx,	cl
seg000:065C		    mov	    ax,	bx
seg000:065E		    shl	    bx,	1
seg000:0660		    add	    bx,	ax
seg000:0662		    shl	    bx,	1
seg000:0664		    test    byte ptr [bx+1B6h],	1
seg000:0669		    jnz	    short loc_106B1
seg000:066B		    cmp	    si,	11Eh
seg000:066F		    jz	    short loc_10677
seg000:0671		    cmp	    si,	126h
seg000:0675		    jnz	    short loc_106AA
seg000:0677
seg000:0677 loc_10677:				    ; CODE XREF: __flsbuf+7Bj
seg000:0677		    push    [bp+var_6]
seg000:067A		    call    _isatty
seg000:067D		    add	    sp,	2
seg000:0680		    or	    ax,	ax
seg000:0682		    jnz	    short loc_106B1
seg000:0684		    inc	    word_11804
seg000:0688		    cmp	    si,	11Eh
seg000:068C		    jnz	    short loc_10694
seg000:068E		    mov	    ax,	380h
seg000:0691		    jmp	    short loc_10697
seg000:0691 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0693		    align 2
seg000:0694
seg000:0694 loc_10694:				    ; CODE XREF: __flsbuf+98j
seg000:0694		    mov	    ax,	780h
seg000:0697
seg000:0697 loc_10697:				    ; CODE XREF: __flsbuf+9Dj
seg000:0697		    mov	    [si+4], ax
seg000:069A		    mov	    [si], ax
seg000:069C		    mov	    bx,	[bp+var_8]
seg000:069F		    mov	    word ptr [bx+2], 200h
seg000:06A4		    mov	    byte ptr [bx], 1
seg000:06A7		    jmp	    short loc_106B1
seg000:06A7 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:06A9		    align 2
seg000:06AA
seg000:06AA loc_106AA:				    ; CODE XREF: __flsbuf+81j
seg000:06AA		    push    si
seg000:06AB		    call    __getbuf
seg000:06AE		    add	    sp,	2
seg000:06B1
seg000:06B1 loc_106B1:				    ; CODE XREF: __flsbuf+5Cj
seg000:06B1					    ; __flsbuf+75j ...
seg000:06B1		    test    byte ptr [si+6], 8
seg000:06B5		    jnz	    short loc_106D0
seg000:06B7		    mov	    bx,	si
seg000:06B9		    sub	    bx,	116h
seg000:06BD		    mov	    cl,	3
seg000:06BF		    sar	    bx,	cl
seg000:06C1		    mov	    ax,	bx
seg000:06C3		    shl	    bx,	1
seg000:06C5		    add	    bx,	ax
seg000:06C7		    shl	    bx,	1
seg000:06C9		    test    byte ptr [bx+1B6h],	1
seg000:06CE		    jz	    short loc_10720
seg000:06D0
seg000:06D0 loc_106D0:				    ; CODE XREF: __flsbuf+C1j
seg000:06D0		    mov	    di,	[si]
seg000:06D2		    sub	    di,	[si+4]
seg000:06D5		    mov	    ax,	[si+4]
seg000:06D8		    inc	    ax
seg000:06D9		    mov	    [si], ax
seg000:06DB		    mov	    bx,	[bp+var_8]
seg000:06DE		    mov	    ax,	[bx+2]
seg000:06E1		    dec	    ax
seg000:06E2		    mov	    [si+2], ax
seg000:06E5		    or	    di,	di
seg000:06E7		    jle	    short loc_106FC
seg000:06E9		    push    di
seg000:06EA		    push    word ptr [si+4]
seg000:06ED		    push    [bp+var_6]
seg000:06F0		    call    _write
seg000:06F3		    add	    sp,	6
seg000:06F6		    mov	    [bp+var_4],	ax
seg000:06F9		    jmp	    short loc_10715
seg000:06F9 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:06FB		    align 2
seg000:06FC
seg000:06FC loc_106FC:				    ; CODE XREF: __flsbuf+F3j
seg000:06FC		    mov	    bx,	[bp+var_6]
seg000:06FF		    test    byte ptr [bx+0D2h],	20h
seg000:0704		    jz	    short loc_10715
seg000:0706		    mov	    ax,	2
seg000:0709		    push    ax
seg000:070A		    sub	    ax,	ax
seg000:070C		    push    ax
seg000:070D		    push    ax
seg000:070E		    push    bx
seg000:070F		    call    _lseek
seg000:0712		    add	    sp,	8
seg000:0715
seg000:0715 loc_10715:				    ; CODE XREF: __flsbuf+105j
seg000:0715					    ; __flsbuf+110j
seg000:0715		    mov	    bx,	[si+4]
seg000:0718		    mov	    al,	byte ptr [bp+arg_0]
seg000:071B		    mov	    [bx], al
seg000:071D		    jmp	    short loc_10736
seg000:071D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:071F		    align 2
seg000:0720
seg000:0720 loc_10720:				    ; CODE XREF: __flsbuf+DAj
seg000:0720		    mov	    di,	1
seg000:0723		    mov	    ax,	di
seg000:0725		    push    ax
seg000:0726		    lea	    ax,	[bp+arg_0]
seg000:0729		    push    ax
seg000:072A		    push    [bp+var_6]
seg000:072D		    call    _write
seg000:0730		    add	    sp,	6
seg000:0733		    mov	    [bp+var_4],	ax
seg000:0736
seg000:0736 loc_10736:				    ; CODE XREF: __flsbuf+129j
seg000:0736		    cmp	    [bp+var_4],	di
seg000:0739		    jz	    short loc_1073E
seg000:073B		    jmp	    loc_10629
seg000:073E ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:073E
seg000:073E loc_1073E:				    ; CODE XREF: __flsbuf+145j
seg000:073E		    mov	    al,	byte ptr [bp+arg_0]
seg000:0741		    sub	    ah,	ah
seg000:0743
seg000:0743 loc_10743:				    ; CODE XREF: __flsbuf+3Cj
seg000:0743		    pop	    si
seg000:0744		    pop	    di
seg000:0745		    mov	    sp,	bp
seg000:0747		    pop	    bp
seg000:0748		    retn
seg000:0748 __flsbuf	    endp
seg000:0748
seg000:0748 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0749		    align 2
seg000:074A
seg000:074A ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:074A
seg000:074A ; Attributes: library function bp-based frame
seg000:074A
seg000:074A __getbuf	    proc near		    ; CODE XREF: __flsbuf+B7p
seg000:074A
seg000:074A var_2	    = word ptr -2
seg000:074A arg_0	    = word ptr	4
seg000:074A
seg000:074A		    push    bp
seg000:074B		    mov	    bp,	sp
seg000:074D		    sub	    sp,	2
seg000:0750		    push    si
seg000:0751		    mov	    ax,	[bp+arg_0]
seg000:0754		    sub	    ax,	116h
seg000:0757		    mov	    cl,	3
seg000:0759		    sar	    ax,	cl
seg000:075B		    mov	    cx,	ax
seg000:075D		    shl	    ax,	1
seg000:075F		    add	    ax,	cx
seg000:0761		    shl	    ax,	1
seg000:0763		    add	    ax,	1B6h
seg000:0766		    mov	    [bp+var_2],	ax
seg000:0769		    mov	    ax,	200h
seg000:076C		    push    ax
seg000:076D		    call    _malloc
seg000:0770		    add	    sp,	2
seg000:0773		    mov	    bx,	[bp+arg_0]
seg000:0776		    mov	    [bx+4], ax
seg000:0779		    or	    ax,	ax
seg000:077B		    jz	    short loc_1078C
seg000:077D		    or	    byte ptr [bx+6], 8
seg000:0781		    mov	    bx,	[bp+var_2]
seg000:0784		    mov	    word ptr [bx+2], 200h
seg000:0789		    jmp	    short loc_107A2
seg000:0789 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:078B		    align 2
seg000:078C
seg000:078C loc_1078C:				    ; CODE XREF: __getbuf+31j
seg000:078C		    mov	    bx,	[bp+arg_0]
seg000:078F		    or	    byte ptr [bx+6], 4
seg000:0793		    mov	    ax,	[bp+var_2]
seg000:0796		    inc	    ax
seg000:0797		    mov	    [bx+4], ax
seg000:079A		    mov	    bx,	[bp+var_2]
seg000:079D		    mov	    word ptr [bx+2], 1
seg000:07A2
seg000:07A2 loc_107A2:				    ; CODE XREF: __getbuf+3Fj
seg000:07A2		    mov	    bx,	[bp+arg_0]
seg000:07A5		    mov	    si,	bx
seg000:07A7		    mov	    ax,	[si+4]
seg000:07AA		    mov	    [bx], ax
seg000:07AC		    mov	    word ptr [bx+2], 0
seg000:07B1		    pop	    si
seg000:07B2		    mov	    sp,	bp
seg000:07B4		    pop	    bp
seg000:07B5		    retn
seg000:07B5 __getbuf	    endp
seg000:07B5
seg000:07B6
seg000:07B6 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:07B6
seg000:07B6 ; Attributes: library function bp-based frame
seg000:07B6
seg000:07B6 __stbuf	    proc near		    ; CODE XREF: _printf+12p
seg000:07B6
seg000:07B6 var_4	    = word ptr -4
seg000:07B6 var_2	    = word ptr -2
seg000:07B6 arg_0	    = word ptr	4
seg000:07B6
seg000:07B6		    push    bp
seg000:07B7		    mov	    bp,	sp
seg000:07B9		    sub	    sp,	4
seg000:07BC		    push    si
seg000:07BD		    mov	    si,	[bp+arg_0]
seg000:07C0		    inc	    word_11804
seg000:07C4		    cmp	    si,	11Eh
seg000:07C8		    jnz	    short loc_107D2
seg000:07CA		    mov	    [bp+var_2],	380h
seg000:07CF		    jmp	    short loc_107DD
seg000:07CF ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:07D1		    align 2
seg000:07D2
seg000:07D2 loc_107D2:				    ; CODE XREF: __stbuf+12j
seg000:07D2		    cmp	    si,	126h
seg000:07D6		    jnz	    short loc_107FC
seg000:07D8		    mov	    [bp+var_2],	780h
seg000:07DD
seg000:07DD loc_107DD:				    ; CODE XREF: __stbuf+19j
seg000:07DD		    test    byte ptr [si+6], 0Ch
seg000:07E1		    jnz	    short loc_107FC
seg000:07E3		    mov	    bx,	si
seg000:07E5		    sub	    bx,	116h
seg000:07E9		    mov	    cl,	3
seg000:07EB		    sar	    bx,	cl
seg000:07ED		    mov	    ax,	bx
seg000:07EF		    shl	    bx,	1
seg000:07F1		    add	    bx,	ax
seg000:07F3		    shl	    bx,	1
seg000:07F5		    test    byte ptr [bx+1B6h],	1
seg000:07FA		    jz	    short loc_10800
seg000:07FC
seg000:07FC loc_107FC:				    ; CODE XREF: __stbuf+20j
seg000:07FC					    ; __stbuf+2Bj
seg000:07FC		    sub	    ax,	ax
seg000:07FE		    jmp	    short loc_10835
seg000:0800 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0800
seg000:0800 loc_10800:				    ; CODE XREF: __stbuf+44j
seg000:0800		    mov	    ax,	si
seg000:0802		    sub	    ax,	116h
seg000:0805		    mov	    cl,	3
seg000:0807		    sar	    ax,	cl
seg000:0809		    mov	    cx,	ax
seg000:080B		    shl	    ax,	1
seg000:080D		    add	    ax,	cx
seg000:080F		    shl	    ax,	1
seg000:0811		    add	    ax,	1B6h
seg000:0814		    mov	    [bp+var_4],	ax
seg000:0817		    mov	    ax,	[bp+var_2]
seg000:081A		    mov	    [si+4], ax
seg000:081D		    mov	    [si], ax
seg000:081F		    mov	    bx,	[bp+var_4]
seg000:0822		    mov	    ax,	200h
seg000:0825		    mov	    [bx+2], ax
seg000:0828		    mov	    [si+2], ax
seg000:082B		    mov	    byte ptr [bx], 1
seg000:082E		    or	    byte ptr [si+6], 2
seg000:0832		    mov	    ax,	1
seg000:0835
seg000:0835 loc_10835:				    ; CODE XREF: __stbuf+48j
seg000:0835		    pop	    si
seg000:0836		    mov	    sp,	bp
seg000:0838		    pop	    bp
seg000:0839		    retn
seg000:0839 __stbuf	    endp
seg000:0839
seg000:083A
seg000:083A ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:083A
seg000:083A ; Attributes: library function bp-based frame
seg000:083A
seg000:083A __ftbuf	    proc near		    ; CODE XREF: _printf+2Dp
seg000:083A
seg000:083A var_2	    = word ptr -2
seg000:083A arg_0	    = word ptr	4
seg000:083A arg_2	    = word ptr	6
seg000:083A
seg000:083A		    push    bp
seg000:083B		    mov	    bp,	sp
seg000:083D		    sub	    sp,	2
seg000:0840		    push    si
seg000:0841		    cmp	    [bp+arg_0],	0
seg000:0845		    jz	    short loc_108A2
seg000:0847		    cmp	    [bp+arg_2],	11Eh
seg000:084C		    jz	    short loc_10855
seg000:084E		    cmp	    [bp+arg_2],	126h
seg000:0853		    jnz	    short loc_108CB
seg000:0855
seg000:0855 loc_10855:				    ; CODE XREF: __ftbuf+12j
seg000:0855		    mov	    bx,	[bp+arg_2]
seg000:0858		    mov	    al,	[bx+7]
seg000:085B		    cbw
seg000:085C		    push    ax
seg000:085D		    call    _isatty
seg000:0860		    add	    sp,	2
seg000:0863		    or	    ax,	ax
seg000:0865		    jz	    short loc_108CB
seg000:0867		    mov	    ax,	[bp+arg_2]
seg000:086A		    sub	    ax,	116h
seg000:086D		    mov	    cl,	3
seg000:086F		    sar	    ax,	cl
seg000:0871		    mov	    cx,	ax
seg000:0873		    shl	    ax,	1
seg000:0875		    add	    ax,	cx
seg000:0877		    shl	    ax,	1
seg000:0879		    add	    ax,	1B6h
seg000:087C		    mov	    [bp+var_2],	ax
seg000:087F		    push    [bp+arg_2]
seg000:0882		    call    _fflush
seg000:0885		    add	    sp,	2
seg000:0888		    mov	    bx,	[bp+var_2]
seg000:088B		    mov	    byte ptr [bx], 0
seg000:088E		    mov	    word ptr [bx+2], 0
seg000:0893		    mov	    bx,	[bp+arg_2]
seg000:0896		    mov	    si,	bx
seg000:0898		    sub	    ax,	ax
seg000:089A		    mov	    [si], ax
seg000:089C		    mov	    [bx+4], ax
seg000:089F		    jmp	    short loc_108CB
seg000:089F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:08A1		    align 2
seg000:08A2
seg000:08A2 loc_108A2:				    ; CODE XREF: __ftbuf+Bj
seg000:08A2		    mov	    bx,	[bp+arg_2]
seg000:08A5		    cmp	    word ptr [bx+4], 380h
seg000:08AA		    jz	    short loc_108B3
seg000:08AC		    cmp	    word ptr [bx+4], 780h
seg000:08B1		    jnz	    short loc_108CB
seg000:08B3
seg000:08B3 loc_108B3:				    ; CODE XREF: __ftbuf+70j
seg000:08B3		    mov	    al,	[bx+7]
seg000:08B6		    cbw
seg000:08B7		    push    ax
seg000:08B8		    call    _isatty
seg000:08BB		    add	    sp,	2
seg000:08BE		    or	    ax,	ax
seg000:08C0		    jz	    short loc_108CB
seg000:08C2		    push    [bp+arg_2]
seg000:08C5		    call    _fflush
seg000:08C8		    add	    sp,	2
seg000:08CB
seg000:08CB loc_108CB:				    ; CODE XREF: __ftbuf+19j
seg000:08CB					    ; __ftbuf+2Bj ...
seg000:08CB		    pop	    si
seg000:08CC		    mov	    sp,	bp
seg000:08CE		    pop	    bp
seg000:08CF		    retn
seg000:08CF __ftbuf	    endp
seg000:08CF
seg000:08D0
seg000:08D0 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:08D0
seg000:08D0 ; Attributes: library function bp-based frame
seg000:08D0
seg000:08D0 _fflush	    proc near		    ; CODE XREF: _flushall+17p
seg000:08D0					    ; __ftbuf+48p ...
seg000:08D0
seg000:08D0 var_4	    = word ptr -4
seg000:08D0 arg_0	    = word ptr	4
seg000:08D0
seg000:08D0		    push    bp
seg000:08D1		    mov	    bp,	sp
seg000:08D3		    sub	    sp,	4
seg000:08D6		    push    di
seg000:08D7		    push    si
seg000:08D8		    mov	    si,	[bp+arg_0]
seg000:08DB		    sub	    di,	di
seg000:08DD		    mov	    al,	[si+6]
seg000:08E0		    and	    al,	3
seg000:08E2		    cmp	    al,	2
seg000:08E4		    jnz	    short loc_1092C
seg000:08E6		    test    byte ptr [si+6], 8
seg000:08EA		    jnz	    short loc_10905
seg000:08EC		    mov	    bx,	si
seg000:08EE		    sub	    bx,	116h
seg000:08F2		    mov	    cl,	3
seg000:08F4		    sar	    bx,	cl
seg000:08F6		    mov	    ax,	bx
seg000:08F8		    shl	    bx,	1
seg000:08FA		    add	    bx,	ax
seg000:08FC		    shl	    bx,	1
seg000:08FE		    test    byte ptr [bx+1B6h],	1
seg000:0903		    jz	    short loc_1092C
seg000:0905
seg000:0905 loc_10905:				    ; CODE XREF: _fflush+1Aj
seg000:0905		    mov	    ax,	[si]
seg000:0907		    sub	    ax,	[si+4]
seg000:090A		    mov	    [bp+var_4],	ax
seg000:090D		    or	    ax,	ax
seg000:090F		    jle	    short loc_1092C
seg000:0911		    push    ax
seg000:0912		    push    word ptr [si+4]
seg000:0915		    mov	    al,	[si+7]
seg000:0918		    cbw
seg000:0919		    push    ax
seg000:091A		    call    _write
seg000:091D		    add	    sp,	6
seg000:0920		    cmp	    ax,	[bp+var_4]
seg000:0923		    jz	    short loc_1092C
seg000:0925		    or	    byte ptr [si+6], 20h
seg000:0929		    mov	    di,	0FFFFh
seg000:092C
seg000:092C loc_1092C:				    ; CODE XREF: _fflush+14j
seg000:092C					    ; _fflush+33j ...
seg000:092C		    mov	    ax,	[si+4]
seg000:092F		    mov	    [si], ax
seg000:0931		    mov	    word ptr [si+2], 0
seg000:0936		    mov	    ax,	di
seg000:0938		    pop	    si
seg000:0939		    pop	    di
seg000:093A		    mov	    sp,	bp
seg000:093C		    pop	    bp
seg000:093D		    retn
seg000:093D _fflush	    endp
seg000:093D
seg000:093E
seg000:093E ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:093E
seg000:093E ; Attributes: library function bp-based frame
seg000:093E
seg000:093E __output	    proc near		    ; CODE XREF: _printf+22p
seg000:093E
seg000:093E var_164	    = word ptr -164h
seg000:093E var_162	    = word ptr -162h
seg000:093E var_4	    = word ptr -4
seg000:093E arg_0	    = word ptr	4
seg000:093E arg_2	    = word ptr	6
seg000:093E arg_4	    = word ptr	8
seg000:093E
seg000:093E		    push    bp
seg000:093F		    mov	    bp,	sp
seg000:0941		    mov	    ax,	164h
seg000:0944		    call    __chkstk
seg000:0947		    push    di
seg000:0948		    push    si
seg000:0949		    mov	    si,	[bp+arg_2]
seg000:094C		    lea	    ax,	[bp+var_162]
seg000:0950		    mov	    word_11A62,	ax
seg000:0953		    mov	    ax,	[bp+arg_4]
seg000:0956		    mov	    word_11A52,	ax
seg000:0959		    mov	    ax,	[bp+arg_0]
seg000:095C		    mov	    word_11A46,	ax
seg000:095F		    mov	    word_11A5C,	0
seg000:0965		    mov	    word_11A5A,	0
seg000:096B		    jmp	    loc_10BEA
seg000:096E ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:096E
seg000:096E loc_1096E:				    ; CODE XREF: __output+2B1j
seg000:096E		    cmp	    byte ptr [si], 25h ; '%'
seg000:0971		    jz	    short loc_10976
seg000:0973		    jmp	    loc_10BCE
seg000:0976 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0976
seg000:0976 loc_10976:				    ; CODE XREF: __output+33j
seg000:0976		    mov	    word_11A5E,	1
seg000:097C		    sub	    ax,	ax
seg000:097E		    mov	    word_11A4E,	ax
seg000:0981		    mov	    word_11A4A,	ax
seg000:0984		    mov	    word_11A58,	ax
seg000:0987		    mov	    word_11A4C,	ax
seg000:098A		    mov	    word_11A56,	ax
seg000:098D		    mov	    word_11A54,	ax
seg000:0990		    mov	    word_11A48,	ax
seg000:0993		    mov	    word_11A44,	ax
seg000:0996		    mov	    word_11A50,	ax
seg000:0999		    mov	    word_11A68,	20h ; ' '
seg000:099F		    cmp	    byte ptr [si+1], 30h ; '0'
seg000:09A3		    jnz	    short loc_109E1
seg000:09A5		    inc	    si
seg000:09A6		    mov	    word_11A68,	30h ; '0'
seg000:09AC		    jmp	    short loc_109E1
seg000:09AE ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:09AE
seg000:09AE loc_109AE:				    ; CODE XREF: __output+9Dj
seg000:09AE		    cmp	    byte ptr [si], 2Bh ; '+'
seg000:09B1		    jnz	    short loc_109C0
seg000:09B3		    inc	    word_11A4E
seg000:09B7		    mov	    word_11A54,	0
seg000:09BD		    jmp	    short loc_109E1
seg000:09BD ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:09BF		    align 2
seg000:09C0
seg000:09C0 loc_109C0:				    ; CODE XREF: __output+73j
seg000:09C0		    cmp	    byte ptr [si], 20h ; ' '
seg000:09C3		    jnz	    short loc_109D2
seg000:09C5		    cmp	    word_11A4E,	0
seg000:09CA		    jnz	    short loc_109E1
seg000:09CC		    inc	    word_11A54
seg000:09D0		    jmp	    short loc_109E1
seg000:09D2 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:09D2
seg000:09D2 loc_109D2:				    ; CODE XREF: __output+85j
seg000:09D2		    inc	    word_11A44
seg000:09D6		    jmp	    short loc_109E1
seg000:09D8 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:09D8
seg000:09D8 loc_109D8:				    ; CODE XREF: __output+B0j
seg000:09D8		    cmp	    byte ptr [si], 2Dh ; '-'
seg000:09DB		    jnz	    short loc_109AE
seg000:09DD		    inc	    word_11A50
seg000:09E1
seg000:09E1 loc_109E1:				    ; CODE XREF: __output+65j
seg000:09E1					    ; __output+6Ej ...
seg000:09E1		    inc	    si
seg000:09E2		    mov	    al,	[si]
seg000:09E4		    cbw
seg000:09E5		    push    ax
seg000:09E6		    call    flagchar
seg000:09E9		    add	    sp,	2
seg000:09EC		    or	    ax,	ax
seg000:09EE		    jnz	    short loc_109D8
seg000:09F0		    push    si
seg000:09F1		    mov	    ax,	374h
seg000:09F4		    push    ax
seg000:09F5		    call    getnum
seg000:09F8		    add	    sp,	4
seg000:09FB		    mov	    si,	ax
seg000:09FD		    cmp	    word_11A64,	0
seg000:0A02		    jge	    short loc_10A10
seg000:0A04		    inc	    word_11A50
seg000:0A08		    mov	    ax,	word_11A64
seg000:0A0B		    neg	    ax
seg000:0A0D		    mov	    word_11A64,	ax
seg000:0A10
seg000:0A10 loc_10A10:				    ; CODE XREF: __output+C4j
seg000:0A10		    cmp	    byte ptr [si], 2Eh ; '.'
seg000:0A13		    jnz	    short loc_10A38
seg000:0A15		    inc	    word_11A56
seg000:0A19		    inc	    si
seg000:0A1A		    push    si
seg000:0A1B		    mov	    ax,	36Eh
seg000:0A1E		    push    ax
seg000:0A1F		    call    getnum
seg000:0A22		    add	    sp,	4
seg000:0A25		    mov	    si,	ax
seg000:0A27		    cmp	    word_11A5E,	0
seg000:0A2C		    jge	    short loc_10A38
seg000:0A2E		    mov	    word_11A5E,	1
seg000:0A34		    dec	    word_11A56
seg000:0A38
seg000:0A38 loc_10A38:				    ; CODE XREF: __output+D5j
seg000:0A38					    ; __output+EEj
seg000:0A38		    mov	    al,	[si]
seg000:0A3A		    cbw
seg000:0A3B		    cmp	    ax,	46h ; 'F'
seg000:0A3E		    jz	    short loc_10A72
seg000:0A40		    cmp	    ax,	4Eh ; 'N'
seg000:0A43		    jz	    short loc_10A7A
seg000:0A45		    cmp	    ax,	68h ; 'h'
seg000:0A48		    jz	    short loc_10A6A
seg000:0A4A		    cmp	    ax,	6Ch ; 'l'
seg000:0A4D		    jnz	    short loc_10A55
seg000:0A4F		    mov	    word_11A4C,	2
seg000:0A55
seg000:0A55 loc_10A55:				    ; CODE XREF: __output+10Fj
seg000:0A55					    ; __output+132j ...
seg000:0A55		    cmp	    word_11A4C,	0
seg000:0A5A		    jnz	    short loc_10A61
seg000:0A5C		    cmp	    byte ptr [si], 4Ch ; 'L'
seg000:0A5F		    jnz	    short loc_10A62
seg000:0A61
seg000:0A61 loc_10A61:				    ; CODE XREF: __output+11Cj
seg000:0A61		    inc	    si
seg000:0A62
seg000:0A62 loc_10A62:				    ; CODE XREF: __output+121j
seg000:0A62		    cmp	    byte ptr [si], 0
seg000:0A65		    jnz	    short loc_10A82
seg000:0A67		    jmp	    loc_10BF2
seg000:0A6A ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0A6A
seg000:0A6A loc_10A6A:				    ; CODE XREF: __output+10Aj
seg000:0A6A		    mov	    word_11A4C,	1
seg000:0A70		    jmp	    short loc_10A55
seg000:0A72 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0A72
seg000:0A72 loc_10A72:				    ; CODE XREF: __output+100j
seg000:0A72		    mov	    word_11A4C,	10h
seg000:0A78		    jmp	    short loc_10A55
seg000:0A7A ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0A7A
seg000:0A7A loc_10A7A:				    ; CODE XREF: __output+105j
seg000:0A7A		    mov	    word_11A4C,	8
seg000:0A80		    jmp	    short loc_10A55
seg000:0A82 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0A82
seg000:0A82 loc_10A82:				    ; CODE XREF: __output+127j
seg000:0A82		    mov	    al,	[si]
seg000:0A84		    cbw
seg000:0A85		    mov	    [bp+var_164], ax
seg000:0A89		    cmp	    ax,	45h ; 'E'
seg000:0A8C		    jz	    short loc_10A98
seg000:0A8E		    cmp	    ax,	47h ; 'G'
seg000:0A91		    jz	    short loc_10A98
seg000:0A93		    cmp	    ax,	58h ; 'X'
seg000:0A96		    jnz	    short loc_10AA1
seg000:0A98
seg000:0A98 loc_10A98:				    ; CODE XREF: __output+14Ej
seg000:0A98					    ; __output+153j
seg000:0A98		    inc	    word_11A4A
seg000:0A9C		    add	    [bp+var_164], 20h ;	' '
seg000:0AA1
seg000:0AA1 loc_10AA1:				    ; CODE XREF: __output+158j
seg000:0AA1		    mov	    ax,	[bp+var_164]
seg000:0AA5		    sub	    ax,	63h ; 'c'
seg000:0AA8		    cmp	    ax,	15h
seg000:0AAB		    jbe	    short loc_10AB0
seg000:0AAD		    jmp	    loc_10BC4
seg000:0AB0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0AB0
seg000:0AB0 loc_10AB0:				    ; CODE XREF: __output+16Dj
seg000:0AB0		    add	    ax,	ax
seg000:0AB2		    xchg    ax,	bx
seg000:0AB3		    jmp	    cs:off_10C08[bx]
seg000:0AB8
seg000:0AB8 loc_10AB8:				    ; DATA XREF: __output+2E0o
seg000:0AB8		    mov	    bx,	word_11A52
seg000:0ABC		    mov	    bx,	[bx]
seg000:0ABE		    mov	    ax,	word_11A5A
seg000:0AC1		    mov	    [bx], ax
seg000:0AC3
seg000:0AC3 loc_10AC3:				    ; CODE XREF: __output+263j
seg000:0AC3		    add	    word_11A52,	2
seg000:0AC8		    jmp	    loc_10C34
seg000:0AC8 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0ACB		    align 2
seg000:0ACC
seg000:0ACC loc_10ACC:				    ; CODE XREF: __output+175j
seg000:0ACC					    ; DATA XREF: __output+2EEo
seg000:0ACC		    inc	    word_11A58
seg000:0AD0
seg000:0AD0 loc_10AD0:				    ; CODE XREF: __output+175j
seg000:0AD0					    ; DATA XREF: __output+2CCo	...
seg000:0AD0		    mov	    word_11A44,	0
seg000:0AD6		    mov	    ax,	0Ah
seg000:0AD9
seg000:0AD9 loc_10AD9:				    ; CODE XREF: __output+1A9j
seg000:0AD9					    ; __output+269j
seg000:0AD9		    push    ax
seg000:0ADA		    call    iprint
seg000:0ADD
seg000:0ADD loc_10ADD:				    ; CODE XREF: __output+272j
seg000:0ADD					    ; __output+283j
seg000:0ADD		    add	    sp,	2
seg000:0AE0		    jmp	    loc_10C34
seg000:0AE0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0AE3		    align 2
seg000:0AE4
seg000:0AE4 loc_10AE4:				    ; CODE XREF: __output+175j
seg000:0AE4					    ; DATA XREF: __output+2E2o
seg000:0AE4		    mov	    ax,	8
seg000:0AE7		    jmp	    short loc_10AD9
seg000:0AE7 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0AE9		    align 2
seg000:0AEA
seg000:0AEA loc_10AEA:				    ; CODE XREF: __output+175j
seg000:0AEA					    ; DATA XREF: __output+2E4o
seg000:0AEA		    inc	    word_11A48
seg000:0AEE		    inc	    word_11A4A
seg000:0AF2		    cmp	    word_11A56,	0
seg000:0AF7		    jnz	    short loc_10B02
seg000:0AF9		    mov	    word_11A60,	1
seg000:0AFF		    jmp	    short loc_10B08
seg000:0AFF ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0B01		    align 2
seg000:0B02
seg000:0B02 loc_10B02:				    ; CODE XREF: __output+1B9j
seg000:0B02		    mov	    word_11A60,	0
seg000:0B08
seg000:0B08 loc_10B08:				    ; CODE XREF: __output+1C1j
seg000:0B08		    inc	    word_11A56
seg000:0B0C		    mov	    word_11A5E,	4
seg000:0B12		    cmp	    word_11A4C,	8
seg000:0B17		    jnz	    short loc_10B1C
seg000:0B19		    jmp	    loc_10BA4
seg000:0B1C ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0B1C
seg000:0B1C loc_10B1C:				    ; CODE XREF: __output+1D9j
seg000:0B1C		    sub	    ax,	ax
seg000:0B1E		    mov	    word_11A4C,	ax
seg000:0B21		    mov	    [bp+var_4],	ax
seg000:0B24		    cmp	    word_11A64,	ax
seg000:0B28		    jz	    short loc_10B51
seg000:0B2A		    mov	    ax,	word_11A64
seg000:0B2D		    mov	    [bp+var_4],	ax
seg000:0B30		    cmp	    word_11A50,	0
seg000:0B35		    jz	    short loc_10B40
seg000:0B37		    mov	    word_11A64,	0
seg000:0B3D		    jmp	    short loc_10B51
seg000:0B3D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0B3F		    align 2
seg000:0B40
seg000:0B40 loc_10B40:				    ; CODE XREF: __output+1F7j
seg000:0B40		    sub	    word_11A64,	5
seg000:0B45		    mov	    ax,	word_11A64
seg000:0B48		    or	    ax,	ax
seg000:0B4A		    jge	    short loc_10B4E
seg000:0B4C		    sub	    ax,	ax
seg000:0B4E
seg000:0B4E loc_10B4E:				    ; CODE XREF: __output+20Cj
seg000:0B4E		    mov	    word_11A64,	ax
seg000:0B51
seg000:0B51 loc_10B51:				    ; CODE XREF: __output+1EAj
seg000:0B51					    ; __output+1FFj
seg000:0B51		    add	    word_11A52,	2
seg000:0B56		    mov	    ax,	10h
seg000:0B59		    push    ax
seg000:0B5A		    call    iprint
seg000:0B5D		    add	    sp,	2
seg000:0B60		    mov	    ax,	3Ah ; ':'
seg000:0B63		    push    ax
seg000:0B64		    call    _outc
seg000:0B67		    add	    sp,	2
seg000:0B6A		    cmp	    [bp+var_4],	0
seg000:0B6E		    jz	    short loc_10B92
seg000:0B70		    cmp	    word_11A50,	0
seg000:0B75		    jz	    short loc_10B8C
seg000:0B77		    mov	    ax,	[bp+var_4]
seg000:0B7A		    sub	    ax,	5
seg000:0B7D		    mov	    word_11A64,	ax
seg000:0B80		    or	    ax,	ax
seg000:0B82		    jge	    short loc_10B86
seg000:0B84		    sub	    ax,	ax
seg000:0B86
seg000:0B86 loc_10B86:				    ; CODE XREF: __output+244j
seg000:0B86		    mov	    word_11A64,	ax
seg000:0B89		    jmp	    short loc_10B92
seg000:0B89 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0B8B		    align 2
seg000:0B8C
seg000:0B8C loc_10B8C:				    ; CODE XREF: __output+237j
seg000:0B8C		    mov	    word_11A64,	0
seg000:0B92
seg000:0B92 loc_10B92:				    ; CODE XREF: __output+230j
seg000:0B92					    ; __output+24Bj
seg000:0B92		    sub	    word_11A52,	4
seg000:0B97		    mov	    ax,	10h
seg000:0B9A		    push    ax
seg000:0B9B		    call    iprint
seg000:0B9E		    add	    sp,	2
seg000:0BA1		    jmp	    loc_10AC3
seg000:0BA4 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0BA4
seg000:0BA4 loc_10BA4:				    ; CODE XREF: __output+175j
seg000:0BA4					    ; __output+1DBj
seg000:0BA4					    ; DATA XREF: ...
seg000:0BA4		    mov	    ax,	10h
seg000:0BA7		    jmp	    loc_10AD9
seg000:0BAA ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0BAA
seg000:0BAA loc_10BAA:				    ; CODE XREF: __output+175j
seg000:0BAA					    ; DATA XREF: __output+2EAo
seg000:0BAA		    sub	    ax,	ax
seg000:0BAC
seg000:0BAC loc_10BAC:				    ; CODE XREF: __output+279j
seg000:0BAC		    push    ax
seg000:0BAD		    call    sprint
seg000:0BB0		    jmp	    loc_10ADD
seg000:0BB0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0BB3		    align 2
seg000:0BB4
seg000:0BB4 loc_10BB4:				    ; CODE XREF: __output+175j
seg000:0BB4					    ; DATA XREF: __output:off_10C08o
seg000:0BB4		    mov	    ax,	1
seg000:0BB7		    jmp	    short loc_10BAC
seg000:0BB7 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0BB9		    align 2
seg000:0BBA
seg000:0BBA loc_10BBA:				    ; CODE XREF: __output+175j
seg000:0BBA					    ; DATA XREF: __output+2CEo	...
seg000:0BBA		    push    [bp+var_164]
seg000:0BBE		    call    fprint
seg000:0BC1		    jmp	    loc_10ADD
seg000:0BC4 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0BC4
seg000:0BC4 loc_10BC4:				    ; CODE XREF: __output+16Fj
seg000:0BC4					    ; __output+175j
seg000:0BC4					    ; DATA XREF: ...
seg000:0BC4		    cmp	    word_11A4C,	0
seg000:0BC9		    jz	    short loc_10BCE
seg000:0BCB		    mov	    ax,	si
seg000:0BCD		    dec	    si
seg000:0BCE
seg000:0BCE loc_10BCE:				    ; CODE XREF: __output+35j
seg000:0BCE					    ; __output+28Bj
seg000:0BCE		    mov	    di,	si
seg000:0BD0
seg000:0BD0 loc_10BD0:				    ; CODE XREF: __output+29Bj
seg000:0BD0		    inc	    di
seg000:0BD1		    cmp	    byte ptr [di], 0
seg000:0BD4		    jz	    short loc_10BDB
seg000:0BD6		    cmp	    byte ptr [di], 25h ; '%'
seg000:0BD9		    jnz	    short loc_10BD0
seg000:0BDB
seg000:0BDB loc_10BDB:				    ; CODE XREF: __output+296j
seg000:0BDB		    mov	    ax,	di
seg000:0BDD		    sub	    ax,	si
seg000:0BDF		    push    ax
seg000:0BE0		    push    ds
seg000:0BE1		    push    si
seg000:0BE2		    call    putbuf
seg000:0BE5		    add	    sp,	6
seg000:0BE8		    mov	    si,	di
seg000:0BEA
seg000:0BEA loc_10BEA:				    ; CODE XREF: __output+2Dj
seg000:0BEA					    ; __output+311j
seg000:0BEA		    cmp	    byte ptr [si], 0
seg000:0BED		    jz	    short loc_10BF2
seg000:0BEF		    jmp	    loc_1096E
seg000:0BF2 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0BF2
seg000:0BF2 loc_10BF2:				    ; CODE XREF: __output+129j
seg000:0BF2					    ; __output+2AFj
seg000:0BF2		    cmp	    word_11A5A,	0
seg000:0BF7		    jnz	    short loc_10C52
seg000:0BF9		    mov	    bx,	word_11A46
seg000:0BFD		    test    byte ptr [bx+6], 20h
seg000:0C01		    jz	    short loc_10C52
seg000:0C03
seg000:0C03 loc_10C03:				    ; CODE XREF: __output+30Cj
seg000:0C03		    mov	    ax,	0FFFFh
seg000:0C06		    jmp	    short loc_10C55
seg000:0C06 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0C08 off_10C08	    dw offset loc_10BB4	    ; DATA XREF: __output+175r
seg000:0C0A		    dw offset loc_10AD0
seg000:0C0C		    dw offset loc_10BBA
seg000:0C0E		    dw offset loc_10BBA
seg000:0C10		    dw offset loc_10BBA
seg000:0C12		    dw offset loc_10BC4
seg000:0C14		    dw offset loc_10AD0
seg000:0C16		    dw offset loc_10BC4
seg000:0C18		    dw offset loc_10BC4
seg000:0C1A		    dw offset loc_10BC4
seg000:0C1C		    dw offset loc_10BC4
seg000:0C1E		    dw offset loc_10AB8
seg000:0C20		    dw offset loc_10AE4
seg000:0C22		    dw offset loc_10AEA
seg000:0C24		    dw offset loc_10BC4
seg000:0C26		    dw offset loc_10BC4
seg000:0C28		    dw offset loc_10BAA
seg000:0C2A		    dw offset loc_10BC4
seg000:0C2C		    dw offset loc_10ACC
seg000:0C2E		    dw offset loc_10BC4
seg000:0C30		    dw offset loc_10BC4
seg000:0C32		    dw offset loc_10BA4
seg000:0C34 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0C34
seg000:0C34 loc_10C34:				    ; CODE XREF: __output+18Aj
seg000:0C34					    ; __output+1A2j
seg000:0C34		    cmp	    word_11A5C,	0
seg000:0C39		    jz	    short loc_10C4E
seg000:0C3B		    cmp	    word_11A5A,	0
seg000:0C40		    jnz	    short loc_10C52
seg000:0C42		    mov	    bx,	word_11A46
seg000:0C46		    test    byte ptr [bx+6], 20h
seg000:0C4A		    jnz	    short loc_10C03
seg000:0C4C		    jmp	    short loc_10C52
seg000:0C4E ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0C4E
seg000:0C4E loc_10C4E:				    ; CODE XREF: __output+2FBj
seg000:0C4E		    inc	    si
seg000:0C4F		    jmp	    short loc_10BEA
seg000:0C4F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0C51		    align 2
seg000:0C52
seg000:0C52 loc_10C52:				    ; CODE XREF: __output+2B9j
seg000:0C52					    ; __output+2C3j ...
seg000:0C52		    mov	    ax,	word_11A5A
seg000:0C55
seg000:0C55 loc_10C55:				    ; CODE XREF: __output+2C8j
seg000:0C55		    pop	    si
seg000:0C56		    pop	    di
seg000:0C57		    mov	    sp,	bp
seg000:0C59		    pop	    bp
seg000:0C5A		    retn
seg000:0C5A __output	    endp
seg000:0C5A
seg000:0C5A ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0C5B		    align 2
seg000:0C5C
seg000:0C5C ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0C5C
seg000:0C5C ; Attributes: library function static bp-based frame
seg000:0C5C
seg000:0C5C iprint	    proc near		    ; CODE XREF: __output+19Cp
seg000:0C5C					    ; __output+21Cp ...
seg000:0C5C
seg000:0C5C var_18	    = word ptr -18h
seg000:0C5C var_C	    = word ptr -0Ch
seg000:0C5C var_8	    = word ptr -8
seg000:0C5C var_4	    = word ptr -4
seg000:0C5C var_2	    = word ptr -2
seg000:0C5C arg_0	    = word ptr	4
seg000:0C5C
seg000:0C5C		    push    bp
seg000:0C5D		    mov	    bp,	sp
seg000:0C5F		    sub	    sp,	18h
seg000:0C62		    push    di
seg000:0C63		    push    si
seg000:0C64		    cmp	    [bp+arg_0],	0Ah
seg000:0C68		    jz	    short loc_10C6E
seg000:0C6A		    inc	    word_11A58
seg000:0C6E
seg000:0C6E loc_10C6E:				    ; CODE XREF: iprint+Cj
seg000:0C6E		    cmp	    word_11A4C,	2
seg000:0C73		    jz	    short loc_10C7C
seg000:0C75		    cmp	    word_11A4C,	10h
seg000:0C7A		    jnz	    short loc_10C92
seg000:0C7C
seg000:0C7C loc_10C7C:				    ; CODE XREF: iprint+17j
seg000:0C7C		    mov	    bx,	word_11A52
seg000:0C80		    mov	    ax,	[bx]
seg000:0C82		    mov	    dx,	[bx+2]
seg000:0C85		    mov	    [bp+var_4],	ax
seg000:0C88		    mov	    [bp+var_2],	dx
seg000:0C8B		    add	    word_11A52,	4
seg000:0C90		    jmp	    short loc_10CBC
seg000:0C92 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0C92
seg000:0C92 loc_10C92:				    ; CODE XREF: iprint+1Ej
seg000:0C92		    cmp	    word_11A58,	0
seg000:0C97		    jz	    short loc_10CAA
seg000:0C99		    mov	    bx,	word_11A52
seg000:0C9D		    mov	    ax,	[bx]
seg000:0C9F		    mov	    [bp+var_4],	ax
seg000:0CA2		    mov	    [bp+var_2],	0
seg000:0CA7		    jmp	    short loc_10CB7
seg000:0CA7 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0CA9		    align 2
seg000:0CAA
seg000:0CAA loc_10CAA:				    ; CODE XREF: iprint+3Bj
seg000:0CAA		    mov	    bx,	word_11A52
seg000:0CAE		    mov	    ax,	[bx]
seg000:0CB0		    cwd
seg000:0CB1		    mov	    [bp+var_4],	ax
seg000:0CB4		    mov	    [bp+var_2],	dx
seg000:0CB7
seg000:0CB7 loc_10CB7:				    ; CODE XREF: iprint+4Bj
seg000:0CB7		    add	    word_11A52,	2
seg000:0CBC
seg000:0CBC loc_10CBC:				    ; CODE XREF: iprint+34j
seg000:0CBC		    cmp	    word_11A44,	0
seg000:0CC1		    jz	    short loc_10CD0
seg000:0CC3		    mov	    ax,	[bp+var_4]
seg000:0CC6		    or	    ax,	[bp+var_2]
seg000:0CC9		    jz	    short loc_10CD0
seg000:0CCB		    mov	    ax,	[bp+arg_0]
seg000:0CCE		    jmp	    short loc_10CD2
seg000:0CD0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0CD0
seg000:0CD0 loc_10CD0:				    ; CODE XREF: iprint+65j
seg000:0CD0					    ; iprint+6Dj
seg000:0CD0		    sub	    ax,	ax
seg000:0CD2
seg000:0CD2 loc_10CD2:				    ; CODE XREF: iprint+72j
seg000:0CD2		    mov	    word_11A66,	ax
seg000:0CD5		    mov	    si,	word_11A62
seg000:0CD9		    cmp	    word_11A58,	0
seg000:0CDE		    jnz	    short loc_10D0A
seg000:0CE0		    cmp	    [bp+var_2],	0
seg000:0CE4		    jge	    short loc_10D0A
seg000:0CE6		    cmp	    [bp+arg_0],	0Ah
seg000:0CEA		    jnz	    short loc_10D03
seg000:0CEC		    mov	    byte ptr [si], 2Dh ; '-'
seg000:0CEF		    inc	    si
seg000:0CF0		    mov	    ax,	[bp+var_4]
seg000:0CF3		    mov	    dx,	[bp+var_2]
seg000:0CF6		    neg	    ax
seg000:0CF8		    adc	    dx,	0
seg000:0CFB		    neg	    dx
seg000:0CFD		    mov	    [bp+var_4],	ax
seg000:0D00		    mov	    [bp+var_2],	dx
seg000:0D03
seg000:0D03 loc_10D03:				    ; CODE XREF: iprint+8Ej
seg000:0D03		    mov	    [bp+var_8],	1
seg000:0D08		    jmp	    short loc_10D0F
seg000:0D0A ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0D0A
seg000:0D0A loc_10D0A:				    ; CODE XREF: iprint+82j
seg000:0D0A					    ; iprint+88j
seg000:0D0A		    mov	    [bp+var_8],	0
seg000:0D0F
seg000:0D0F loc_10D0F:				    ; CODE XREF: iprint+ACj
seg000:0D0F		    lea	    ax,	[bp+var_18]
seg000:0D12		    mov	    di,	ax
seg000:0D14		    push    [bp+arg_0]
seg000:0D17		    push    di
seg000:0D18		    push    [bp+var_2]
seg000:0D1B		    push    [bp+var_4]
seg000:0D1E		    call    _ultoa
seg000:0D21		    add	    sp,	8
seg000:0D24		    cmp	    word_11A56,	0
seg000:0D29		    jz	    short loc_10D4C
seg000:0D2B		    push    di
seg000:0D2C		    call    _strlen
seg000:0D2F		    add	    sp,	2
seg000:0D32		    mov	    cx,	word_11A5E
seg000:0D36		    sub	    cx,	ax
seg000:0D38		    mov	    [bp+var_C],	cx
seg000:0D3B		    jmp	    short loc_10D42
seg000:0D3B ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0D3D		    align 2
seg000:0D3E
seg000:0D3E loc_10D3E:				    ; CODE XREF: iprint+EBj
seg000:0D3E		    mov	    byte ptr [si], 30h ; '0'
seg000:0D41		    inc	    si
seg000:0D42
seg000:0D42 loc_10D42:				    ; CODE XREF: iprint+DFj
seg000:0D42		    mov	    ax,	cx
seg000:0D44		    dec	    cx
seg000:0D45		    or	    ax,	ax
seg000:0D47		    jg	    short loc_10D3E
seg000:0D49		    mov	    [bp+var_C],	cx
seg000:0D4C
seg000:0D4C loc_10D4C:				    ; CODE XREF: iprint+CDj
seg000:0D4C		    mov	    cx,	word_11A4A
seg000:0D50
seg000:0D50 loc_10D50:				    ; CODE XREF: iprint+109j
seg000:0D50		    mov	    al,	[di]
seg000:0D52		    mov	    [si], al
seg000:0D54		    or	    cx,	cx
seg000:0D56		    jz	    short loc_10D5F
seg000:0D58		    cmp	    al,	61h ; 'a'
seg000:0D5A		    jl	    short loc_10D5F
seg000:0D5C		    sub	    byte ptr [si], 20h ; ' '
seg000:0D5F
seg000:0D5F loc_10D5F:				    ; CODE XREF: iprint+FAj
seg000:0D5F					    ; iprint+FEj
seg000:0D5F		    inc	    si
seg000:0D60		    inc	    di
seg000:0D61		    cmp	    byte ptr [di-1], 0
seg000:0D65		    jnz	    short loc_10D50
seg000:0D67		    cmp	    word_11A58,	0
seg000:0D6C		    jnz	    short loc_10D82
seg000:0D6E		    mov	    ax,	word_11A4E
seg000:0D71		    or	    ax,	word_11A54
seg000:0D75		    jz	    short loc_10D82
seg000:0D77		    cmp	    [bp+var_8],	0
seg000:0D7B		    jnz	    short loc_10D82
seg000:0D7D		    mov	    ax,	1
seg000:0D80		    jmp	    short loc_10D84
seg000:0D82 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0D82
seg000:0D82 loc_10D82:				    ; CODE XREF: iprint+110j
seg000:0D82					    ; iprint+119j ...
seg000:0D82		    sub	    ax,	ax
seg000:0D84
seg000:0D84 loc_10D84:				    ; CODE XREF: iprint+124j
seg000:0D84		    push    ax
seg000:0D85		    call    _out
seg000:0D88		    add	    sp,	2
seg000:0D8B		    pop	    si
seg000:0D8C		    pop	    di
seg000:0D8D		    mov	    sp,	bp
seg000:0D8F		    pop	    bp
seg000:0D90		    retn
seg000:0D90 iprint	    endp
seg000:0D90
seg000:0D90 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0D91		    align 2
seg000:0D92
seg000:0D92 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0D92
seg000:0D92 ; Attributes: library function static bp-based frame
seg000:0D92
seg000:0D92 sprint	    proc near		    ; CODE XREF: __output+26Fp
seg000:0D92
seg000:0D92 var_E	    = dword ptr	-0Eh
seg000:0D92 var_8	    = word ptr -8
seg000:0D92 var_6	    = word ptr -6
seg000:0D92 var_4	    = word ptr -4
seg000:0D92 arg_0	    = word ptr	4
seg000:0D92
seg000:0D92		    push    bp
seg000:0D93		    mov	    bp,	sp
seg000:0D95		    sub	    sp,	10h
seg000:0D98		    push    di
seg000:0D99		    push    si
seg000:0D9A		    cmp	    [bp+arg_0],	0
seg000:0D9E		    jz	    short loc_10DB4
seg000:0DA0		    mov	    si,	1
seg000:0DA3		    mov	    ax,	word_11A52
seg000:0DA6		    mov	    [bp+var_8],	ax
seg000:0DA9		    mov	    [bp+var_6],	ds
seg000:0DAC		    add	    word_11A52,	2
seg000:0DB1		    jmp	    loc_10E45
seg000:0DB4 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0DB4
seg000:0DB4 loc_10DB4:				    ; CODE XREF: sprint+Cj
seg000:0DB4		    cmp	    word_11A4C,	10h
seg000:0DB9		    jnz	    short loc_10DD2
seg000:0DBB		    mov	    bx,	word_11A52
seg000:0DBF		    mov	    ax,	[bx]
seg000:0DC1		    mov	    dx,	[bx+2]
seg000:0DC4		    mov	    [bp+var_8],	ax
seg000:0DC7		    mov	    [bp+var_6],	dx
seg000:0DCA		    add	    word_11A52,	4
seg000:0DCF		    jmp	    short loc_10DE6
seg000:0DCF ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0DD1		    align 2
seg000:0DD2
seg000:0DD2 loc_10DD2:				    ; CODE XREF: sprint+27j
seg000:0DD2		    mov	    bx,	word_11A52
seg000:0DD6		    mov	    ax,	[bx]
seg000:0DD8		    mov	    [bp+var_4],	ax
seg000:0DDB		    mov	    [bp+var_8],	ax
seg000:0DDE		    mov	    [bp+var_6],	ds
seg000:0DE1		    add	    word_11A52,	2
seg000:0DE6
seg000:0DE6 loc_10DE6:				    ; CODE XREF: sprint+3Dj
seg000:0DE6		    cmp	    word_11A4C,	10h
seg000:0DEB		    jnz	    short loc_10DFA
seg000:0DED		    mov	    ax,	[bp+var_8]
seg000:0DF0		    or	    ax,	[bp+var_6]
seg000:0DF3		    jnz	    short loc_10E09
seg000:0DF5		    mov	    ax,	230h
seg000:0DF8		    jmp	    short loc_10E03
seg000:0DFA ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0DFA
seg000:0DFA loc_10DFA:				    ; CODE XREF: sprint+59j
seg000:0DFA		    cmp	    [bp+var_4],	0
seg000:0DFE		    jnz	    short loc_10E09
seg000:0E00		    mov	    ax,	237h
seg000:0E03
seg000:0E03 loc_10E03:				    ; CODE XREF: sprint+66j
seg000:0E03		    mov	    [bp+var_8],	ax
seg000:0E06		    mov	    [bp+var_6],	ds
seg000:0E09
seg000:0E09 loc_10E09:				    ; CODE XREF: sprint+61j
seg000:0E09					    ; sprint+6Cj
seg000:0E09		    mov	    ax,	[bp+var_8]
seg000:0E0C		    mov	    dx,	[bp+var_6]
seg000:0E0F		    mov	    word ptr [bp+var_E], ax
seg000:0E12		    mov	    word ptr [bp+var_E+2], dx
seg000:0E15		    sub	    si,	si
seg000:0E17		    cmp	    word_11A56,	si
seg000:0E1B		    jz	    short loc_10E39
seg000:0E1D		    mov	    cx,	word_11A5E
seg000:0E21		    jmp	    short loc_10E31
seg000:0E21 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0E23		    align 2
seg000:0E24
seg000:0E24 loc_10E24:				    ; CODE XREF: sprint+A3j
seg000:0E24		    les	    bx,	[bp+var_E]
seg000:0E27		    inc	    word ptr [bp+var_E]
seg000:0E2A		    cmp	    byte ptr es:[bx], 0
seg000:0E2E		    jz	    short loc_10E45
seg000:0E30		    inc	    si
seg000:0E31
seg000:0E31 loc_10E31:				    ; CODE XREF: sprint+8Fj
seg000:0E31		    cmp	    cx,	si
seg000:0E33		    jle	    short loc_10E45
seg000:0E35		    jmp	    short loc_10E24
seg000:0E35 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0E37		    align 2
seg000:0E38
seg000:0E38 loc_10E38:				    ; CODE XREF: sprint+B1j
seg000:0E38		    inc	    si
seg000:0E39
seg000:0E39 loc_10E39:				    ; CODE XREF: sprint+89j
seg000:0E39		    les	    bx,	[bp+var_E]
seg000:0E3C		    inc	    word ptr [bp+var_E]
seg000:0E3F		    cmp	    byte ptr es:[bx], 0
seg000:0E43		    jnz	    short loc_10E38
seg000:0E45
seg000:0E45 loc_10E45:				    ; CODE XREF: sprint+1Fj
seg000:0E45					    ; sprint+9Cj ...
seg000:0E45		    mov	    di,	word_11A64
seg000:0E49		    sub	    di,	si
seg000:0E4B		    cmp	    word_11A50,	0
seg000:0E50		    jnz	    short loc_10E59
seg000:0E52		    push    di
seg000:0E53		    call    putpad
seg000:0E56		    add	    sp,	2
seg000:0E59
seg000:0E59 loc_10E59:				    ; CODE XREF: sprint+BEj
seg000:0E59		    push    si
seg000:0E5A		    push    [bp+var_6]
seg000:0E5D		    push    [bp+var_8]
seg000:0E60		    call    putbuf
seg000:0E63		    add	    sp,	6
seg000:0E66		    cmp	    word_11A50,	0
seg000:0E6B		    jz	    short loc_10E74
seg000:0E6D		    push    di
seg000:0E6E		    call    putpad
seg000:0E71		    add	    sp,	2
seg000:0E74
seg000:0E74 loc_10E74:				    ; CODE XREF: sprint+D9j
seg000:0E74		    pop	    si
seg000:0E75		    pop	    di
seg000:0E76		    mov	    sp,	bp
seg000:0E78		    pop	    bp
seg000:0E79		    retn
seg000:0E79 sprint	    endp
seg000:0E79
seg000:0E7A
seg000:0E7A ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0E7A
seg000:0E7A ; Attributes: library function static bp-based frame
seg000:0E7A
seg000:0E7A fprint	    proc near		    ; CODE XREF: __output+280p
seg000:0E7A
seg000:0E7A var_4	    = byte ptr -4
seg000:0E7A var_2	    = word ptr -2
seg000:0E7A arg_0	    = word ptr	4
seg000:0E7A
seg000:0E7A		    push    bp
seg000:0E7B		    mov	    bp,	sp
seg000:0E7D		    sub	    sp,	4
seg000:0E80		    mov	    ax,	word_11A52
seg000:0E83		    mov	    [bp+var_2],	ax
seg000:0E86		    cmp	    [bp+arg_0],	67h ; 'g'
seg000:0E8A		    jz	    short loc_10E92
seg000:0E8C		    cmp	    [bp+arg_0],	47h ; 'G'
seg000:0E90		    jnz	    short loc_10E96
seg000:0E92
seg000:0E92 loc_10E92:				    ; CODE XREF: fprint+10j
seg000:0E92		    mov	    al,	1
seg000:0E94		    jmp	    short loc_10E98
seg000:0E96 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0E96
seg000:0E96 loc_10E96:				    ; CODE XREF: fprint+16j
seg000:0E96		    sub	    al,	al
seg000:0E98
seg000:0E98 loc_10E98:				    ; CODE XREF: fprint+1Aj
seg000:0E98		    mov	    [bp+var_4],	al
seg000:0E9B		    cmp	    word_11A56,	0
seg000:0EA0		    jnz	    short loc_10EA8
seg000:0EA2		    mov	    word_11A5E,	6
seg000:0EA8
seg000:0EA8 loc_10EA8:				    ; CODE XREF: fprint+26j
seg000:0EA8		    cmp	    [bp+var_4],	0
seg000:0EAC		    jz	    short loc_10EBB
seg000:0EAE		    cmp	    word_11A5E,	0
seg000:0EB3		    jnz	    short loc_10EBB
seg000:0EB5		    mov	    word_11A5E,	1
seg000:0EBB
seg000:0EBB loc_10EBB:				    ; CODE XREF: fprint+32j
seg000:0EBB					    ; fprint+39j
seg000:0EBB		    push    word_11A4A
seg000:0EBF		    push    word_11A5E
seg000:0EC3		    push    [bp+arg_0]
seg000:0EC6		    push    word_11A62
seg000:0ECA		    push    [bp+var_2]
seg000:0ECD		    call    off_1194A
seg000:0ED1		    add	    sp,	0Ah
seg000:0ED4		    cmp	    [bp+var_4],	0
seg000:0ED8		    jz	    short loc_10EEC
seg000:0EDA		    cmp	    word_11A44,	0
seg000:0EDF		    jnz	    short loc_10EEC
seg000:0EE1		    push    word_11A62
seg000:0EE5		    call    off_1194C
seg000:0EE9		    add	    sp,	2
seg000:0EEC
seg000:0EEC loc_10EEC:				    ; CODE XREF: fprint+5Ej
seg000:0EEC					    ; fprint+65j
seg000:0EEC		    cmp	    word_11A44,	0
seg000:0EF1		    jz	    short loc_10F05
seg000:0EF3		    cmp	    word_11A5E,	0
seg000:0EF8		    jnz	    short loc_10F05
seg000:0EFA		    push    word_11A62
seg000:0EFE		    call    off_11950
seg000:0F02		    add	    sp,	2
seg000:0F05
seg000:0F05 loc_10F05:				    ; CODE XREF: fprint+77j
seg000:0F05					    ; fprint+7Ej
seg000:0F05		    add	    word_11A52,	8
seg000:0F0A		    mov	    word_11A66,	0
seg000:0F10		    mov	    ax,	word_11A4E
seg000:0F13		    or	    ax,	word_11A54
seg000:0F17		    jz	    short loc_10F2C
seg000:0F19		    push    [bp+var_2]
seg000:0F1C		    call    off_11952
seg000:0F20		    add	    sp,	2
seg000:0F23		    or	    ax,	ax
seg000:0F25		    jz	    short loc_10F2C
seg000:0F27		    mov	    ax,	1
seg000:0F2A		    jmp	    short loc_10F2E
seg000:0F2C ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0F2C
seg000:0F2C loc_10F2C:				    ; CODE XREF: fprint+9Dj
seg000:0F2C					    ; fprint+ABj
seg000:0F2C		    sub	    ax,	ax
seg000:0F2E
seg000:0F2E loc_10F2E:				    ; CODE XREF: fprint+B0j
seg000:0F2E		    push    ax
seg000:0F2F		    call    _out
seg000:0F32		    mov	    sp,	bp
seg000:0F34		    pop	    bp
seg000:0F35		    retn
seg000:0F35 fprint	    endp
seg000:0F35
seg000:0F36
seg000:0F36 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0F36
seg000:0F36 ; Attributes: library function static bp-based frame
seg000:0F36
seg000:0F36 _outc	    proc near		    ; CODE XREF: __output+226p
seg000:0F36					    ; _out+5Cp	...
seg000:0F36
seg000:0F36 arg_0	    = byte ptr	4
seg000:0F36
seg000:0F36		    push    bp
seg000:0F37		    mov	    bp,	sp
seg000:0F39		    push    si
seg000:0F3A		    cmp	    word_11A5C,	0
seg000:0F3F		    jnz	    short loc_10F70
seg000:0F41		    mov	    bx,	word_11A46
seg000:0F45		    dec	    word ptr [bx+2]
seg000:0F48		    js	    short loc_10F58
seg000:0F4A		    mov	    al,	[bp+arg_0]
seg000:0F4D		    mov	    si,	[bx]
seg000:0F4F		    inc	    word ptr [bx]
seg000:0F51		    mov	    [si], al
seg000:0F53		    sub	    ah,	ah
seg000:0F55		    jmp	    short loc_10F62
seg000:0F55 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0F57		    align 2
seg000:0F58
seg000:0F58 loc_10F58:				    ; CODE XREF: _outc+12j
seg000:0F58		    push    bx
seg000:0F59		    push    word ptr [bp+arg_0]
seg000:0F5C		    call    __flsbuf
seg000:0F5F		    add	    sp,	4
seg000:0F62
seg000:0F62 loc_10F62:				    ; CODE XREF: _outc+1Fj
seg000:0F62		    inc	    ax
seg000:0F63		    jnz	    short loc_10F6C
seg000:0F65		    inc	    word_11A5C
seg000:0F69		    jmp	    short loc_10F70
seg000:0F69 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0F6B		    align 2
seg000:0F6C
seg000:0F6C loc_10F6C:				    ; CODE XREF: _outc+2Dj
seg000:0F6C		    inc	    word_11A5A
seg000:0F70
seg000:0F70 loc_10F70:				    ; CODE XREF: _outc+9j
seg000:0F70					    ; _outc+33j
seg000:0F70		    pop	    si
seg000:0F71		    pop	    bp
seg000:0F72		    retn
seg000:0F72 _outc	    endp
seg000:0F72
seg000:0F72 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0F73		    align 2
seg000:0F74
seg000:0F74 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0F74
seg000:0F74 ; Attributes: library function static bp-based frame
seg000:0F74
seg000:0F74 putpad	    proc near		    ; CODE XREF: sprint+C1p
seg000:0F74					    ; sprint+DCp ...
seg000:0F74
seg000:0F74 arg_0	    = word ptr	4
seg000:0F74
seg000:0F74		    push    bp
seg000:0F75		    mov	    bp,	sp
seg000:0F77		    sub	    sp,	2
seg000:0F7A		    push    di
seg000:0F7B		    push    si
seg000:0F7C		    cmp	    word_11A5C,	0
seg000:0F81		    jnz	    short loc_10FCC
seg000:0F83		    mov	    si,	[bp+arg_0]
seg000:0F86		    or	    si,	si
seg000:0F88		    jle	    short loc_10FCC
seg000:0F8A		    jmp	    short loc_10FA1
seg000:0F8C ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0F8C
seg000:0F8C loc_10F8C:				    ; CODE XREF: putpad+3Bj
seg000:0F8C		    push    word_11A46
seg000:0F90		    push    word_11A68
seg000:0F94		    call    __flsbuf
seg000:0F97		    add	    sp,	4
seg000:0F9A
seg000:0F9A loc_10F9A:				    ; CODE XREF: putpad+48j
seg000:0F9A		    inc	    ax
seg000:0F9B		    jnz	    short loc_10FA1
seg000:0F9D		    inc	    word_11A5C
seg000:0FA1
seg000:0FA1 loc_10FA1:				    ; CODE XREF: putpad+16j
seg000:0FA1					    ; putpad+27j
seg000:0FA1		    mov	    ax,	si
seg000:0FA3		    dec	    si
seg000:0FA4		    or	    ax,	ax
seg000:0FA6		    jle	    short loc_10FBE
seg000:0FA8		    mov	    bx,	word_11A46
seg000:0FAC		    dec	    word ptr [bx+2]
seg000:0FAF		    js	    short loc_10F8C
seg000:0FB1		    mov	    al,	byte ptr word_11A68
seg000:0FB4		    mov	    di,	[bx]
seg000:0FB6		    inc	    word ptr [bx]
seg000:0FB8		    mov	    [di], al
seg000:0FBA		    sub	    ah,	ah
seg000:0FBC		    jmp	    short loc_10F9A
seg000:0FBE ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0FBE
seg000:0FBE loc_10FBE:				    ; CODE XREF: putpad+32j
seg000:0FBE		    cmp	    word_11A5C,	0
seg000:0FC3		    jnz	    short loc_10FCC
seg000:0FC5		    mov	    ax,	[bp+arg_0]
seg000:0FC8		    add	    word_11A5A,	ax
seg000:0FCC
seg000:0FCC loc_10FCC:				    ; CODE XREF: putpad+Dj
seg000:0FCC					    ; putpad+14j ...
seg000:0FCC		    pop	    si
seg000:0FCD		    pop	    di
seg000:0FCE		    mov	    sp,	bp
seg000:0FD0		    pop	    bp
seg000:0FD1		    retn
seg000:0FD1 putpad	    endp
seg000:0FD1
seg000:0FD2
seg000:0FD2 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:0FD2
seg000:0FD2 ; Attributes: library function static bp-based frame
seg000:0FD2
seg000:0FD2 putbuf	    proc near		    ; CODE XREF: __output+2A4p
seg000:0FD2					    ; sprint+CEp ...
seg000:0FD2
seg000:0FD2 arg_0	    = dword ptr	 4
seg000:0FD2 arg_4	    = word ptr	8
seg000:0FD2
seg000:0FD2		    push    bp
seg000:0FD3		    mov	    bp,	sp
seg000:0FD5		    sub	    sp,	2
seg000:0FD8		    push    di
seg000:0FD9		    push    si
seg000:0FDA		    mov	    si,	[bp+arg_4]
seg000:0FDD		    cmp	    word_11A5C,	0
seg000:0FE2		    jnz	    short loc_11034
seg000:0FE4		    jmp	    short loc_11002
seg000:0FE6 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:0FE6
seg000:0FE6 loc_10FE6:				    ; CODE XREF: putbuf+3Ej
seg000:0FE6		    push    word_11A46
seg000:0FEA		    les	    bx,	[bp+arg_0]
seg000:0FED		    mov	    al,	es:[bx]
seg000:0FF0		    cbw
seg000:0FF1		    push    ax
seg000:0FF2		    call    __flsbuf
seg000:0FF5		    add	    sp,	4
seg000:0FF8
seg000:0FF8 loc_10FF8:				    ; CODE XREF: putbuf+52j
seg000:0FF8		    inc	    ax
seg000:0FF9		    jnz	    short loc_10FFF
seg000:0FFB		    inc	    word_11A5C
seg000:0FFF
seg000:0FFF loc_10FFF:				    ; CODE XREF: putbuf+27j
seg000:0FFF		    inc	    word ptr [bp+arg_0]
seg000:1002
seg000:1002 loc_11002:				    ; CODE XREF: putbuf+12j
seg000:1002		    mov	    ax,	si
seg000:1004		    dec	    si
seg000:1005		    or	    ax,	ax
seg000:1007		    jz	    short loc_11026
seg000:1009		    mov	    bx,	word_11A46
seg000:100D		    dec	    word ptr [bx+2]
seg000:1010		    js	    short loc_10FE6
seg000:1012		    les	    bx,	[bp+arg_0]
seg000:1015		    mov	    al,	es:[bx]
seg000:1018		    mov	    bx,	word_11A46
seg000:101C		    mov	    di,	[bx]
seg000:101E		    inc	    word ptr [bx]
seg000:1020		    mov	    [di], al
seg000:1022		    sub	    ah,	ah
seg000:1024		    jmp	    short loc_10FF8
seg000:1026 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1026
seg000:1026 loc_11026:				    ; CODE XREF: putbuf+35j
seg000:1026		    cmp	    word_11A5C,	0
seg000:102B		    jnz	    short loc_11034
seg000:102D		    mov	    ax,	[bp+arg_4]
seg000:1030		    add	    word_11A5A,	ax
seg000:1034
seg000:1034 loc_11034:				    ; CODE XREF: putbuf+10j
seg000:1034					    ; putbuf+59j
seg000:1034		    pop	    si
seg000:1035		    pop	    di
seg000:1036		    mov	    sp,	bp
seg000:1038		    pop	    bp
seg000:1039		    retn
seg000:1039 putbuf	    endp
seg000:1039
seg000:103A
seg000:103A ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:103A
seg000:103A ; Attributes: library function static bp-based frame
seg000:103A
seg000:103A _out	    proc near		    ; CODE XREF: iprint+129p
seg000:103A					    ; fprint+B5p
seg000:103A
seg000:103A var_8	    = word ptr -8
seg000:103A var_6	    = word ptr -6
seg000:103A var_4	    = word ptr -4
seg000:103A arg_0	    = word ptr	4
seg000:103A
seg000:103A		    push    bp
seg000:103B		    mov	    bp,	sp
seg000:103D		    sub	    sp,	0Ah
seg000:1040		    push    di
seg000:1041		    push    si
seg000:1042		    mov	    si,	word_11A62
seg000:1046		    sub	    ax,	ax
seg000:1048		    mov	    [bp+var_4],	ax
seg000:104B		    mov	    [bp+var_6],	ax
seg000:104E		    cmp	    word_11A68,	30h ; '0'
seg000:1053		    jnz	    short loc_1106D
seg000:1055		    cmp	    word_11A56,	ax
seg000:1059		    jz	    short loc_1106D
seg000:105B		    cmp	    word_11A48,	ax
seg000:105F		    jz	    short loc_11067
seg000:1061		    cmp	    word_11A60,	ax
seg000:1065		    jnz	    short loc_1106D
seg000:1067
seg000:1067 loc_11067:				    ; CODE XREF: _out+25j
seg000:1067		    mov	    word_11A68,	20h ; ' '
seg000:106D
seg000:106D loc_1106D:				    ; CODE XREF: _out+19j
seg000:106D					    ; _out+1Fj	...
seg000:106D		    mov	    di,	word_11A64
seg000:1071		    push    si
seg000:1072		    call    _strlen
seg000:1075		    add	    sp,	2
seg000:1078		    mov	    [bp+var_8],	ax
seg000:107B		    sub	    di,	ax
seg000:107D		    sub	    di,	[bp+arg_0]
seg000:1080		    cmp	    word_11A50,	0
seg000:1085		    jnz	    short loc_1109F
seg000:1087		    cmp	    byte ptr [si], 2Dh ; '-'
seg000:108A		    jnz	    short loc_1109F
seg000:108C		    cmp	    word_11A68,	30h ; '0'
seg000:1091		    jnz	    short loc_1109F
seg000:1093		    lodsb
seg000:1094		    cbw
seg000:1095		    push    ax
seg000:1096		    call    _outc
seg000:1099		    add	    sp,	2
seg000:109C		    dec	    [bp+var_8]
seg000:109F
seg000:109F loc_1109F:				    ; CODE XREF: _out+4Bj
seg000:109F					    ; _out+50j	...
seg000:109F		    cmp	    word_11A68,	30h ; '0'
seg000:10A4		    jz	    short loc_110B1
seg000:10A6		    or	    di,	di
seg000:10A8		    jle	    short loc_110B1
seg000:10AA		    cmp	    word_11A50,	0
seg000:10AF		    jz	    short loc_110CA
seg000:10B1
seg000:10B1 loc_110B1:				    ; CODE XREF: _out+6Aj
seg000:10B1					    ; _out+6Ej
seg000:10B1		    cmp	    [bp+arg_0],	0
seg000:10B5		    jz	    short loc_110BD
seg000:10B7		    inc	    [bp+var_6]
seg000:10BA		    call    putsign
seg000:10BD
seg000:10BD loc_110BD:				    ; CODE XREF: _out+7Bj
seg000:10BD		    cmp	    word_11A66,	0
seg000:10C2		    jz	    short loc_110CA
seg000:10C4		    inc	    [bp+var_4]
seg000:10C7		    call    putprefix
seg000:10CA
seg000:10CA loc_110CA:				    ; CODE XREF: _out+75j
seg000:10CA					    ; _out+88j
seg000:10CA		    cmp	    word_11A50,	0
seg000:10CF		    jnz	    short loc_110F7
seg000:10D1		    push    di
seg000:10D2		    call    putpad
seg000:10D5		    add	    sp,	2
seg000:10D8		    cmp	    [bp+arg_0],	0
seg000:10DC		    jz	    short loc_110E7
seg000:10DE		    cmp	    [bp+var_6],	0
seg000:10E2		    jnz	    short loc_110E7
seg000:10E4		    call    putsign
seg000:10E7
seg000:10E7 loc_110E7:				    ; CODE XREF: _out+A2j
seg000:10E7					    ; _out+A8j
seg000:10E7		    cmp	    word_11A66,	0
seg000:10EC		    jz	    short loc_110F7
seg000:10EE		    cmp	    [bp+var_4],	0
seg000:10F2		    jnz	    short loc_110F7
seg000:10F4		    call    putprefix
seg000:10F7
seg000:10F7 loc_110F7:				    ; CODE XREF: _out+95j
seg000:10F7					    ; _out+B2j	...
seg000:10F7		    push    [bp+var_8]
seg000:10FA		    push    ds
seg000:10FB		    push    si
seg000:10FC		    call    putbuf
seg000:10FF		    add	    sp,	6
seg000:1102		    cmp	    word_11A50,	0
seg000:1107		    jz	    short loc_11116
seg000:1109		    mov	    word_11A68,	20h ; ' '
seg000:110F		    push    di
seg000:1110		    call    putpad
seg000:1113		    add	    sp,	2
seg000:1116
seg000:1116 loc_11116:				    ; CODE XREF: _out+CDj
seg000:1116		    pop	    si
seg000:1117		    pop	    di
seg000:1118		    mov	    sp,	bp
seg000:111A		    pop	    bp
seg000:111B		    retn
seg000:111B _out	    endp
seg000:111B
seg000:111C
seg000:111C ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:111C
seg000:111C ; Attributes: library function static
seg000:111C
seg000:111C putsign	    proc near		    ; CODE XREF: _out+80p
seg000:111C					    ; _out+AAp
seg000:111C		    cmp	    word_11A4E,	0
seg000:1121		    jz	    short loc_11128
seg000:1123		    mov	    ax,	2Bh ; '+'
seg000:1126		    jmp	    short loc_1112B
seg000:1128 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1128
seg000:1128 loc_11128:				    ; CODE XREF: putsign+5j
seg000:1128		    mov	    ax,	20h ; ' '
seg000:112B
seg000:112B loc_1112B:				    ; CODE XREF: putsign+Aj
seg000:112B		    push    ax
seg000:112C		    call    _outc
seg000:112F		    add	    sp,	2
seg000:1132		    retn
seg000:1132 putsign	    endp
seg000:1132
seg000:1132 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1133		    align 2
seg000:1134
seg000:1134 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1134
seg000:1134 ; Attributes: library function static
seg000:1134
seg000:1134 putprefix	    proc near		    ; CODE XREF: _out+8Dp
seg000:1134					    ; _out+BAp
seg000:1134		    mov	    ax,	30h ; '0'
seg000:1137		    push    ax
seg000:1138		    call    _outc
seg000:113B		    add	    sp,	2
seg000:113E		    cmp	    word_11A66,	10h
seg000:1143		    jnz	    short locret_1115C
seg000:1145		    cmp	    word_11A4A,	0
seg000:114A		    jz	    short loc_11152
seg000:114C		    mov	    ax,	58h ; 'X'
seg000:114F		    jmp	    short loc_11155
seg000:114F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1151		    align 2
seg000:1152
seg000:1152 loc_11152:				    ; CODE XREF: putprefix+16j
seg000:1152		    mov	    ax,	78h ; 'x'
seg000:1155
seg000:1155 loc_11155:				    ; CODE XREF: putprefix+1Bj
seg000:1155		    push    ax
seg000:1156		    call    _outc
seg000:1159		    add	    sp,	2
seg000:115C
seg000:115C locret_1115C:			    ; CODE XREF: putprefix+Fj
seg000:115C		    retn
seg000:115C putprefix	    endp
seg000:115C
seg000:115C ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:115D		    align 2
seg000:115E
seg000:115E ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:115E
seg000:115E ; Attributes: library function static bp-based frame
seg000:115E
seg000:115E getnum	    proc near		    ; CODE XREF: __output+B7p
seg000:115E					    ; __output+E1p
seg000:115E
seg000:115E var_2	    = word ptr -2
seg000:115E arg_0	    = word ptr	4
seg000:115E arg_2	    = word ptr	6
seg000:115E
seg000:115E		    push    bp
seg000:115F		    mov	    bp,	sp
seg000:1161		    sub	    sp,	4
seg000:1164		    push    di
seg000:1165		    push    si
seg000:1166		    mov	    si,	[bp+arg_2]
seg000:1169		    mov	    [bp+var_2],	1
seg000:116E		    cmp	    byte ptr [si], 2Ah ; '*'
seg000:1171		    jnz	    short loc_11182
seg000:1173		    mov	    bx,	word_11A52
seg000:1177		    mov	    di,	[bx]
seg000:1179		    add	    word_11A52,	2
seg000:117E		    inc	    si
seg000:117F		    jmp	    short loc_111C9
seg000:117F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1181		    align 2
seg000:1182
seg000:1182 loc_11182:				    ; CODE XREF: getnum+13j
seg000:1182		    cmp	    byte ptr [si], 2Dh ; '-'
seg000:1185		    jnz	    short loc_1118D
seg000:1187		    mov	    [bp+var_2],	0FFFFh
seg000:118C		    inc	    si
seg000:118D
seg000:118D loc_1118D:				    ; CODE XREF: getnum+27j
seg000:118D		    sub	    di,	di
seg000:118F		    cmp	    byte ptr [si], 30h ; '0'
seg000:1192		    jl	    short loc_111C9
seg000:1194		    cmp	    byte ptr [si], 39h ; '9'
seg000:1197		    jg	    short loc_111C9
seg000:1199		    cmp	    word_11A56,	di
seg000:119D		    jnz	    short loc_111AA
seg000:119F		    cmp	    byte ptr [si], 30h ; '0'
seg000:11A2		    jnz	    short loc_111AA
seg000:11A4		    mov	    word_11A68,	30h ; '0'
seg000:11AA
seg000:11AA loc_111AA:				    ; CODE XREF: getnum+3Fj
seg000:11AA					    ; getnum+44j ...
seg000:11AA		    mov	    al,	[si]
seg000:11AC		    cbw
seg000:11AD		    mov	    cx,	di
seg000:11AF		    shl	    cx,	1
seg000:11B1		    shl	    cx,	1
seg000:11B3		    add	    cx,	di
seg000:11B5		    shl	    cx,	1
seg000:11B7		    add	    cx,	ax
seg000:11B9		    sub	    cx,	30h ; '0'
seg000:11BC		    mov	    di,	cx
seg000:11BE		    inc	    si
seg000:11BF		    cmp	    byte ptr [si], 30h ; '0'
seg000:11C2		    jl	    short loc_111C9
seg000:11C4		    cmp	    byte ptr [si], 39h ; '9'
seg000:11C7		    jle	    short loc_111AA
seg000:11C9
seg000:11C9 loc_111C9:				    ; CODE XREF: getnum+21j
seg000:11C9					    ; getnum+34j ...
seg000:11C9		    mov	    ax,	[bp+var_2]
seg000:11CC		    imul    di
seg000:11CE		    mov	    di,	ax
seg000:11D0		    mov	    bx,	[bp+arg_0]
seg000:11D3		    mov	    [bx], di
seg000:11D5		    mov	    ax,	si
seg000:11D7		    pop	    si
seg000:11D8		    pop	    di
seg000:11D9		    mov	    sp,	bp
seg000:11DB		    pop	    bp
seg000:11DC		    retn
seg000:11DC getnum	    endp
seg000:11DC
seg000:11DC ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:11DD		    align 2
seg000:11DE
seg000:11DE ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:11DE
seg000:11DE ; Attributes: library function static bp-based frame
seg000:11DE
seg000:11DE flagchar	    proc near		    ; CODE XREF: __output+A8p
seg000:11DE
seg000:11DE arg_0	    = byte ptr	4
seg000:11DE
seg000:11DE		    push    bp
seg000:11DF		    mov	    bp,	sp
seg000:11E1		    sub	    sp,	2
seg000:11E4		    push    si
seg000:11E5		    mov	    si,	23Eh
seg000:11E8		    mov	    cl,	[bp+arg_0]
seg000:11EB		    jmp	    short loc_111EF
seg000:11EB ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:11ED		    align 2
seg000:11EE
seg000:11EE loc_111EE:				    ; CODE XREF: flagchar+18j
seg000:11EE		    inc	    si
seg000:11EF
seg000:11EF loc_111EF:				    ; CODE XREF: flagchar+Dj
seg000:11EF		    cmp	    byte ptr [si], 0
seg000:11F2		    jz	    short loc_111FE
seg000:11F4		    cmp	    cl,	[si]
seg000:11F6		    jnz	    short loc_111EE
seg000:11F8		    mov	    ax,	1
seg000:11FB		    jmp	    short loc_11200
seg000:11FB ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:11FD		    align 2
seg000:11FE
seg000:11FE loc_111FE:				    ; CODE XREF: flagchar+14j
seg000:11FE		    sub	    ax,	ax
seg000:1200
seg000:1200 loc_11200:				    ; CODE XREF: flagchar+1Dj
seg000:1200		    pop	    si
seg000:1201		    mov	    sp,	bp
seg000:1203		    pop	    bp
seg000:1204		    retn
seg000:1204 flagchar	    endp
seg000:1204
seg000:1204 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1205		    align 2
seg000:1206
seg000:1206 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1206
seg000:1206 ; Attributes: library function bp-based frame
seg000:1206
seg000:1206 _lseek	    proc near		    ; CODE XREF: __flsbuf+11Bp
seg000:1206
seg000:1206 var_4	    = word ptr -4
seg000:1206 var_2	    = word ptr -2
seg000:1206 arg_0	    = word ptr	4
seg000:1206 arg_2	    = word ptr	6
seg000:1206 arg_4	    = word ptr	8
seg000:1206 arg_6	    = word ptr	0Ah
seg000:1206
seg000:1206 ; FUNCTION CHUNK AT	seg000:0545 SIZE 0000000D BYTES
seg000:1206
seg000:1206		    push    bp
seg000:1207		    mov	    bp,	sp
seg000:1209		    sub	    sp,	4
seg000:120C		    mov	    bx,	[bp+arg_0]
seg000:120F		    cmp	    bx,	word_117C0
seg000:1213		    jb	    short loc_1121A
seg000:1215		    mov	    ax,	900h
seg000:1218		    jmp	    short loc_11244
seg000:121A ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:121A
seg000:121A loc_1121A:				    ; CODE XREF: _lseek+Dj
seg000:121A		    test    [bp+arg_4],	8000h
seg000:121F		    jz	    short loc_11269
seg000:1221		    cmp	    [bp+arg_6],	0
seg000:1225		    jz	    short loc_11241
seg000:1227		    xor	    cx,	cx
seg000:1229		    mov	    dx,	cx
seg000:122B		    mov	    ax,	4201h
seg000:122E		    int	    21h		    ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
seg000:122E					    ; AL = method: offset from present location
seg000:1230		    jb	    short loc_1127D
seg000:1232		    test    [bp+arg_6],	2
seg000:1237		    jnz	    short loc_11247
seg000:1239		    add	    ax,	[bp+arg_2]
seg000:123C		    adc	    dx,	[bp+arg_4]
seg000:123F		    jns	    short loc_11269
seg000:1241
seg000:1241 loc_11241:				    ; CODE XREF: _lseek+1Fj
seg000:1241					    ; _lseek+61j
seg000:1241		    mov	    ax,	1600h
seg000:1244
seg000:1244 loc_11244:				    ; CODE XREF: _lseek+12j
seg000:1244		    stc
seg000:1245		    jmp	    short loc_1127D
seg000:1247 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1247
seg000:1247 loc_11247:				    ; CODE XREF: _lseek+31j
seg000:1247		    mov	    [bp+var_2],	dx
seg000:124A		    mov	    [bp+var_4],	ax
seg000:124D		    mov	    dx,	cx
seg000:124F		    mov	    ax,	4202h
seg000:1252		    int	    21h		    ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
seg000:1252					    ; AL = method: offset from end of file
seg000:1254		    add	    ax,	[bp+arg_2]
seg000:1257		    adc	    dx,	[bp+arg_4]
seg000:125A		    jns	    short loc_11269
seg000:125C		    mov	    cx,	[bp+var_2]
seg000:125F		    mov	    dx,	[bp+var_4]
seg000:1262		    mov	    ax,	4200h
seg000:1265		    int	    21h		    ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
seg000:1265					    ; AL = method: offset from beginning of file
seg000:1267		    jmp	    short loc_11241
seg000:1269 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1269
seg000:1269 loc_11269:				    ; CODE XREF: _lseek+19j
seg000:1269					    ; _lseek+39j ...
seg000:1269		    mov	    dx,	[bp+arg_2]
seg000:126C		    mov	    cx,	[bp+arg_4]
seg000:126F		    mov	    al,	byte ptr [bp+arg_6]
seg000:1272		    mov	    ah,	42h
seg000:1274		    int	    21h		    ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
seg000:1274					    ; AL = method:
seg000:1274					    ; 0-from beginnig,1-from current,2-from end
seg000:1276		    jb	    short loc_1127D
seg000:1278		    and	    byte ptr [bx+0D2h],	0FDh
seg000:127D
seg000:127D loc_1127D:				    ; CODE XREF: _lseek+2Aj
seg000:127D					    ; _lseek+3Fj ...
seg000:127D		    jmp	    __dosretax
seg000:127D _lseek	    endp
seg000:127D
seg000:1280
seg000:1280 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1280
seg000:1280 ; Attributes: library function bp-based frame
seg000:1280
seg000:1280 _write	    proc near		    ; CODE XREF: __flsbuf+FCp
seg000:1280					    ; __flsbuf+139p ...
seg000:1280
seg000:1280 var_8	    = word ptr -8
seg000:1280 var_4	    = word ptr -4
seg000:1280 var_2	    = word ptr -2
seg000:1280 arg_0	    = word ptr	4
seg000:1280 arg_2	    = word ptr	6
seg000:1280 arg_4	    = word ptr	8
seg000:1280
seg000:1280 ; FUNCTION CHUNK AT	seg000:1296 SIZE 00000112 BYTES
seg000:1280
seg000:1280		    push    bp
seg000:1281		    mov	    bp,	sp
seg000:1283		    sub	    sp,	8
seg000:1286		    mov	    bx,	[bp+arg_0]
seg000:1289		    cmp	    bx,	word_117C0
seg000:128D		    jb	    short loc_11296
seg000:128F		    mov	    ax,	900h
seg000:1292		    stc
seg000:1293
seg000:1293 loc_11293:				    ; CODE XREF: _write+26j
seg000:1293		    jmp	    __dosretax
seg000:1293 _write	    endp
seg000:1293
seg000:1296 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1296 ; START OF FUNCTION	CHUNK FOR _write
seg000:1296
seg000:1296 loc_11296:				    ; CODE XREF: _write+Dj
seg000:1296		    test    byte ptr [bx+0D2h],	20h
seg000:129B		    jz	    short loc_112A8
seg000:129D		    mov	    ax,	4202h
seg000:12A0		    xor	    cx,	cx
seg000:12A2		    mov	    dx,	cx
seg000:12A4		    int	    21h		    ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
seg000:12A4					    ; AL = method: offset from end of file
seg000:12A6		    jb	    short loc_11293
seg000:12A8
seg000:12A8 loc_112A8:				    ; CODE XREF: _write+1Bj
seg000:12A8		    test    byte ptr [bx+0D2h],	80h
seg000:12AD		    jz	    short loc_1131D
seg000:12AF		    mov	    dx,	[bp+arg_2]
seg000:12B2		    push    ds
seg000:12B3		    pop	    es
seg000:12B4		    assume es:dseg
seg000:12B4		    xor	    ax,	ax
seg000:12B6		    mov	    [bp+var_2],	ax
seg000:12B9		    mov	    [bp+var_4],	ax
seg000:12BC		    cld
seg000:12BD		    push    di
seg000:12BE		    push    si
seg000:12BF		    mov	    di,	dx
seg000:12C1		    mov	    si,	dx
seg000:12C3		    mov	    [bp+var_8],	sp
seg000:12C6		    mov	    cx,	[bp+arg_4]
seg000:12C9		    jcxz    short loc_1131F
seg000:12CB		    mov	    al,	0Ah
seg000:12CD		    repne scasb
seg000:12CF		    jnz	    short loc_1131B
seg000:12D1		    call    _stackavail
seg000:12D4		    cmp	    ax,	0A8h ; '¨'
seg000:12D7		    jbe	    short loc_11321
seg000:12D9		    sub	    sp,	2
seg000:12DC		    mov	    bx,	sp
seg000:12DE		    mov	    dx,	200h
seg000:12E1		    cmp	    ax,	228h
seg000:12E4		    jnb	    short loc_112E9
seg000:12E6		    mov	    dx,	80h ; ''
seg000:12E9
seg000:12E9 loc_112E9:				    ; CODE XREF: _write+64j
seg000:12E9		    sub	    sp,	dx
seg000:12EB		    mov	    dx,	sp
seg000:12ED		    mov	    di,	dx
seg000:12EF		    push    ss
seg000:12F0		    pop	    es
seg000:12F1		    mov	    cx,	[bp+arg_4]
seg000:12F4
seg000:12F4 loc_112F4:				    ; CODE XREF: _write+7Ej
seg000:12F4		    lodsb
seg000:12F5		    cmp	    al,	0Ah
seg000:12F7		    jz	    short loc_11305
seg000:12F9
seg000:12F9 loc_112F9:				    ; CODE XREF: _write+94j
seg000:12F9		    cmp	    di,	bx
seg000:12FB		    jz	    short loc_11316
seg000:12FD
seg000:12FD loc_112FD:				    ; CODE XREF: _write+99j
seg000:12FD		    stosb
seg000:12FE		    loop    loc_112F4
seg000:1300		    call    loc_11326
seg000:1303		    jmp	    short loc_11366
seg000:1305 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1305
seg000:1305 loc_11305:				    ; CODE XREF: _write+77j
seg000:1305		    mov	    al,	0Dh
seg000:1307		    cmp	    di,	bx
seg000:1309		    jnz	    short loc_1130E
seg000:130B		    call    loc_11326
seg000:130E
seg000:130E loc_1130E:				    ; CODE XREF: _write+89j
seg000:130E		    stosb
seg000:130F		    mov	    al,	0Ah
seg000:1311		    inc	    [bp+var_4]
seg000:1314		    jmp	    short loc_112F9
seg000:1316 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1316
seg000:1316 loc_11316:				    ; CODE XREF: _write+7Bj
seg000:1316		    call    loc_11326
seg000:1319		    jmp	    short loc_112FD
seg000:131B ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:131B
seg000:131B loc_1131B:				    ; CODE XREF: _write+4Fj
seg000:131B		    pop	    si
seg000:131C		    pop	    di
seg000:131D
seg000:131D loc_1131D:				    ; CODE XREF: _write+2Dj
seg000:131D		    jmp	    short loc_11374
seg000:131F ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:131F
seg000:131F loc_1131F:				    ; CODE XREF: _write+49j
seg000:131F		    jmp	    short loc_11366
seg000:1321 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1321
seg000:1321 loc_11321:				    ; CODE XREF: _write+57j
seg000:1321		    xor	    ax,	ax
seg000:1323		    jmp	    loc_100C3
seg000:1326 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1326
seg000:1326 loc_11326:				    ; CODE XREF: _write+80p
seg000:1326					    ; _write+8Bp ...
seg000:1326		    push    ax
seg000:1327		    push    bx
seg000:1328		    push    cx
seg000:1329		    mov	    cx,	di
seg000:132B		    sub	    cx,	dx
seg000:132D		    jcxz    short loc_1133F
seg000:132F		    mov	    bx,	[bp+arg_0]
seg000:1332		    mov	    ah,	40h
seg000:1334		    int	    21h		    ; DOS - 2+ - WRITE TO FILE WITH HANDLE
seg000:1334					    ; BX = file	handle,	CX = number of bytes to	write, DS:DX ->	buffer
seg000:1336		    jb	    short loc_11345
seg000:1338		    add	    [bp+var_2],	ax
seg000:133B		    or	    ax,	ax
seg000:133D		    jz	    short loc_11345
seg000:133F
seg000:133F loc_1133F:				    ; CODE XREF: _write+ADj
seg000:133F		    pop	    cx
seg000:1340		    pop	    bx
seg000:1341		    pop	    ax
seg000:1342		    mov	    di,	dx
seg000:1344		    retn
seg000:1345 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1345
seg000:1345 loc_11345:				    ; CODE XREF: _write+B6j
seg000:1345					    ; _write+BDj
seg000:1345		    add	    sp,	8
seg000:1348		    jnb	    short loc_1134E
seg000:134A		    mov	    ah,	9
seg000:134C		    jmp	    short loc_1136C
seg000:134E ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:134E
seg000:134E loc_1134E:				    ; CODE XREF: _write+C8j
seg000:134E		    test    byte ptr [bx+0D2h],	40h
seg000:1353		    jz	    short loc_11360
seg000:1355		    mov	    bx,	[bp+arg_2]
seg000:1358		    cmp	    byte ptr [bx], 1Ah
seg000:135B		    jnz	    short loc_11360
seg000:135D		    clc
seg000:135E		    jmp	    short loc_1136C
seg000:1360 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1360
seg000:1360 loc_11360:				    ; CODE XREF: _write+D3j
seg000:1360					    ; _write+DBj
seg000:1360		    stc
seg000:1361		    mov	    ax,	1C00h
seg000:1364		    jmp	    short loc_1136C
seg000:1366 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1366
seg000:1366 loc_11366:				    ; CODE XREF: _write+83j
seg000:1366					    ; _write:loc_1131Fj
seg000:1366		    mov	    ax,	[bp+var_2]
seg000:1369		    sub	    ax,	[bp+var_4]
seg000:136C
seg000:136C loc_1136C:				    ; CODE XREF: _write+CCj
seg000:136C					    ; _write+DEj ...
seg000:136C		    mov	    sp,	[bp+var_8]
seg000:136F		    pop	    si
seg000:1370		    pop	    di
seg000:1371
seg000:1371 loc_11371:				    ; CODE XREF: _write+10Bj
seg000:1371					    ; _write+10Fj ...
seg000:1371		    jmp	    __dosretax
seg000:1374 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1374
seg000:1374 loc_11374:				    ; CODE XREF: _write:loc_1131Dj
seg000:1374		    mov	    cx,	[bp+arg_4]
seg000:1377		    or	    cx,	cx
seg000:1379		    jnz	    short loc_11380
seg000:137B		    mov	    ax,	cx
seg000:137D		    jmp	    __dosretax
seg000:1380 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1380
seg000:1380 loc_11380:				    ; CODE XREF: _write+F9j
seg000:1380		    mov	    dx,	[bp+arg_2]
seg000:1383		    mov	    ah,	40h
seg000:1385		    int	    21h		    ; DOS - 2+ - WRITE TO FILE WITH HANDLE
seg000:1385					    ; BX = file	handle,	CX = number of bytes to	write, DS:DX ->	buffer
seg000:1387		    jnb	    short loc_1138D
seg000:1389		    mov	    ah,	9
seg000:138B		    jmp	    short loc_11371
seg000:138D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:138D
seg000:138D loc_1138D:				    ; CODE XREF: _write+107j
seg000:138D		    or	    ax,	ax
seg000:138F		    jnz	    short loc_11371
seg000:1391		    test    byte ptr [bx+0D2h],	40h
seg000:1396		    jz	    short loc_113A2
seg000:1398		    mov	    bx,	dx
seg000:139A		    cmp	    byte ptr [bx], 1Ah
seg000:139D		    jnz	    short loc_113A2
seg000:139F		    clc
seg000:13A0		    jmp	    short loc_11371
seg000:13A2 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:13A2
seg000:13A2 loc_113A2:				    ; CODE XREF: _write+116j
seg000:13A2					    ; _write+11Dj
seg000:13A2		    stc
seg000:13A3		    mov	    ax,	1C00h
seg000:13A6		    jmp	    short loc_11371
seg000:13A6 ; END OF FUNCTION CHUNK FOR	_write
seg000:13A8
seg000:13A8 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:13A8
seg000:13A8 ; Attributes: library function
seg000:13A8
seg000:13A8 _stackavail	    proc near		    ; CODE XREF: _write+51p
seg000:13A8		    pop	    cx
seg000:13A9		    mov	    ax,	word_117EC
seg000:13AC		    cmp	    ax,	sp
seg000:13AE		    jnb	    short loc_113B6
seg000:13B0		    sub	    ax,	sp
seg000:13B2		    neg	    ax
seg000:13B4
seg000:13B4 loc_113B4:				    ; CODE XREF: _stackavail+10j
seg000:13B4		    jmp	    cx
seg000:13B6 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:13B6
seg000:13B6 loc_113B6:				    ; CODE XREF: _stackavail+6j
seg000:13B6		    xor	    ax,	ax
seg000:13B8		    jmp	    short loc_113B4
seg000:13B8 _stackavail	    endp
seg000:13B8
seg000:13BA
seg000:13BA ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:13BA
seg000:13BA ; Attributes: library function bp-based frame
seg000:13BA
seg000:13BA __nfree	    proc near
seg000:13BA
seg000:13BA arg_0	    = word ptr	4
seg000:13BA
seg000:13BA		    push    bp
seg000:13BB		    mov	    bp,	sp
seg000:13BD		    mov	    bx,	[bp+arg_0]
seg000:13C0		    or	    bx,	bx
seg000:13C2		    jz	    short loc_113C8
seg000:13C4		    or	    byte ptr [bx-2], 1
seg000:13C8
seg000:13C8 loc_113C8:				    ; CODE XREF: __nfree+8j
seg000:13C8		    mov	    sp,	bp
seg000:13CA		    pop	    bp
seg000:13CB		    retn
seg000:13CB __nfree	    endp
seg000:13CB
seg000:13CC
seg000:13CC ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:13CC
seg000:13CC ; Attributes: library function bp-based frame
seg000:13CC
seg000:13CC _malloc	    proc near		    ; CODE XREF: __getbuf+23p
seg000:13CC
seg000:13CC arg_0	    = word ptr	4
seg000:13CC
seg000:13CC		    push    bp
seg000:13CD		    mov	    bp,	sp
seg000:13CF		    push    si
seg000:13D0		    push    di
seg000:13D1		    mov	    bx,	244h
seg000:13D4		    cmp	    word ptr [bx], 0
seg000:13D7		    jnz	    short loc_11402
seg000:13D9		    push    ds
seg000:13DA		    pop	    es
seg000:13DB		    mov	    ax,	5
seg000:13DE		    call    __amallocbrk
seg000:13E1		    jnz	    short loc_113E8
seg000:13E3		    xor	    ax,	ax
seg000:13E5		    cwd
seg000:13E6		    jmp	    short loc_1140C
seg000:13E8 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:13E8
seg000:13E8 loc_113E8:				    ; CODE XREF: _malloc+15j
seg000:13E8		    inc	    ax
seg000:13E9		    and	    al,	0FEh
seg000:13EB		    mov	    word_11934,	ax
seg000:13EE		    mov	    word_11936,	ax
seg000:13F1		    xchg    ax,	si
seg000:13F2		    mov	    word ptr [si], 1
seg000:13F6		    add	    si,	4
seg000:13F9		    mov	    word ptr [si-2], 0FFFEh
seg000:13FE		    mov	    word_1193A,	si
seg000:1402
seg000:1402 loc_11402:				    ; CODE XREF: _malloc+Bj
seg000:1402		    mov	    cx,	[bp+arg_0]
seg000:1405		    mov	    ax,	ds
seg000:1407		    mov	    es,	ax
seg000:1409		    call    __amalloc
seg000:140C
seg000:140C loc_1140C:				    ; CODE XREF: _malloc+1Aj
seg000:140C		    pop	    di
seg000:140D		    pop	    si
seg000:140E		    mov	    sp,	bp
seg000:1410		    pop	    bp
seg000:1411		    retn
seg000:1411 _malloc	    endp
seg000:1411
seg000:1412 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1412 ; START OF FUNCTION	CHUNK FOR __amalloc
seg000:1412
seg000:1412 loc_11412:				    ; CODE XREF: __amalloc+1j
seg000:1412					    ; __amalloc+9j
seg000:1412		    jmp	    loc_114E3
seg000:1412 ; END OF FUNCTION CHUNK FOR	__amalloc
seg000:1415
seg000:1415 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1415
seg000:1415 ; Attributes: library function
seg000:1415
seg000:1415 __amalloc	    proc near		    ; CODE XREF: _malloc+3Dp
seg000:1415
seg000:1415 ; FUNCTION CHUNK AT	seg000:1412 SIZE 00000003 BYTES
seg000:1415
seg000:1415		    inc	    cx
seg000:1416		    jz	    short loc_11412
seg000:1418		    and	    cl,	0FEh
seg000:141B		    cmp	    cx,	0FFEEh
seg000:141E		    jnb	    short loc_11412
seg000:1420		    mov	    si,	[bx+2]
seg000:1423		    cld
seg000:1424		    lodsw
seg000:1425		    mov	    di,	si
seg000:1427		    test    al,	1
seg000:1429		    jz	    short loc_1146D
seg000:142B
seg000:142B loc_1142B:				    ; CODE XREF: __amalloc+2Ej
seg000:142B		    dec	    ax
seg000:142C		    cmp	    ax,	cx
seg000:142E		    jnb	    short loc_11445
seg000:1430		    mov	    dx,	ax
seg000:1432		    add	    si,	ax
seg000:1434		    lodsw
seg000:1435		    test    al,	1
seg000:1437		    jz	    short loc_1146D
seg000:1439		    add	    ax,	dx
seg000:143B		    add	    ax,	2
seg000:143E		    mov	    si,	di
seg000:1440		    mov	    [si-2], ax
seg000:1443		    jmp	    short loc_1142B
seg000:1445 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1445
seg000:1445 loc_11445:				    ; CODE XREF: __amalloc+19j
seg000:1445					    ; __amalloc+71j
seg000:1445		    mov	    di,	si
seg000:1447		    jz	    short loc_11455
seg000:1449		    add	    di,	cx
seg000:144B		    mov	    [si-2], cx
seg000:144E		    sub	    ax,	cx
seg000:1450		    dec	    ax
seg000:1451		    mov	    [di], ax
seg000:1453		    jmp	    short loc_1145A
seg000:1455 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1455
seg000:1455 loc_11455:				    ; CODE XREF: __amalloc+32j
seg000:1455		    add	    di,	cx
seg000:1457		    dec	    byte ptr [si-2]
seg000:145A
seg000:145A loc_1145A:				    ; CODE XREF: __amalloc+3Ej
seg000:145A		    mov	    ax,	si
seg000:145C		    mov	    dx,	ds
seg000:145E		    mov	    cx,	ss
seg000:1460		    cmp	    dx,	cx
seg000:1462		    jz	    short loc_11469
seg000:1464		    mov	    es:word_11942, ds
seg000:1469
seg000:1469 loc_11469:				    ; CODE XREF: __amalloc+4Dj
seg000:1469		    mov	    [bx+2], di
seg000:146C		    retn
seg000:146D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:146D
seg000:146D loc_1146D:				    ; CODE XREF: __amalloc+14j
seg000:146D					    ; __amalloc+22j
seg000:146D		    mov	    es:byte_11948, 2
seg000:1473
seg000:1473 loc_11473:				    ; CODE XREF: __amalloc+6Aj
seg000:1473					    ; __amalloc+7Aj
seg000:1473		    cmp	    ax,	0FFFEh
seg000:1476		    jz	    short loc_1149D
seg000:1478		    mov	    di,	si
seg000:147A		    add	    si,	ax
seg000:147C
seg000:147C loc_1147C:				    ; CODE XREF: __amalloc+A9j
seg000:147C					    ; __amalloc+CCj
seg000:147C		    lodsw
seg000:147D		    test    al,	1
seg000:147F		    jz	    short loc_11473
seg000:1481		    mov	    di,	si
seg000:1483
seg000:1483 loc_11483:				    ; CODE XREF: __amalloc+86j
seg000:1483		    dec	    ax
seg000:1484		    cmp	    ax,	cx
seg000:1486		    jnb	    short loc_11445
seg000:1488		    mov	    dx,	ax
seg000:148A		    add	    si,	ax
seg000:148C		    lodsw
seg000:148D		    test    al,	1
seg000:148F		    jz	    short loc_11473
seg000:1491		    add	    ax,	dx
seg000:1493		    add	    ax,	2
seg000:1496		    mov	    si,	di
seg000:1498		    mov	    [si-2], ax
seg000:149B		    jmp	    short loc_11483
seg000:149D ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:149D
seg000:149D loc_1149D:				    ; CODE XREF: __amalloc+61j
seg000:149D		    mov	    ax,	[bx+8]
seg000:14A0		    or	    ax,	ax
seg000:14A2		    jz	    short loc_114A8
seg000:14A4		    mov	    ds,	ax
seg000:14A6		    jmp	    short loc_114BC
seg000:14A8 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:14A8
seg000:14A8 loc_114A8:				    ; CODE XREF: __amalloc+8Dj
seg000:14A8		    dec	    es:byte_11948
seg000:14AD		    jz	    short loc_114C0
seg000:14AF		    mov	    ax,	ds
seg000:14B1		    mov	    di,	ss
seg000:14B3		    cmp	    ax,	di
seg000:14B5		    jz	    short loc_114BC
seg000:14B7		    mov	    ds,	es:word_1193E
seg000:14BC		    assume ds:nothing
seg000:14BC
seg000:14BC loc_114BC:				    ; CODE XREF: __amalloc+91j
seg000:14BC					    ; __amalloc+A0j
seg000:14BC		    mov	    si,	[bx]
seg000:14BE		    jmp	    short loc_1147C
seg000:14C0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:14C0
seg000:14C0 loc_114C0:				    ; CODE XREF: __amalloc+98j
seg000:14C0		    mov	    si,	[bx+6]
seg000:14C3		    xor	    ax,	ax
seg000:14C5		    call    __amlink
seg000:14C8		    cmp	    ax,	si
seg000:14CA		    jz	    short loc_114D9
seg000:14CC		    and	    al,	1
seg000:14CE		    inc	    ax
seg000:14CF		    inc	    ax
seg000:14D0		    cbw
seg000:14D1		    call    __amlink
seg000:14D4		    jz	    short loc_114E3
seg000:14D6		    dec	    byte ptr [di-2]
seg000:14D9
seg000:14D9 loc_114D9:				    ; CODE XREF: __amalloc+B5j
seg000:14D9		    call    __amexpand
seg000:14DC		    jz	    short loc_114E3
seg000:14DE		    xchg    ax,	si
seg000:14DF		    dec	    si
seg000:14E0		    dec	    si
seg000:14E1		    jmp	    short loc_1147C
seg000:14E3 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:14E3
seg000:14E3 loc_114E3:				    ; CODE XREF: __amalloc:loc_11412j
seg000:14E3					    ; __amalloc+BFj ...
seg000:14E3		    mov	    ax,	ds
seg000:14E5		    mov	    cx,	ss
seg000:14E7		    cmp	    ax,	cx
seg000:14E9		    jz	    short loc_114EF
seg000:14EB		    mov	    es:word_11942, ax
seg000:14EF
seg000:14EF loc_114EF:				    ; CODE XREF: __amalloc+D4j
seg000:14EF		    mov	    ax,	[bx]
seg000:14F1		    mov	    [bx+2], ax
seg000:14F4		    xor	    ax,	ax
seg000:14F6		    cwd
seg000:14F7		    retn
seg000:14F7 __amalloc	    endp
seg000:14F7
seg000:14F8
seg000:14F8 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:14F8
seg000:14F8 ; Attributes: library function
seg000:14F8
seg000:14F8 __amexpand	    proc near		    ; CODE XREF: __amalloc:loc_114D9p
seg000:14F8		    push    cx
seg000:14F9		    mov	    ax,	[di-2]
seg000:14FC		    test    al,	1
seg000:14FE		    jz	    short loc_11503
seg000:1500		    sub	    cx,	ax
seg000:1502		    dec	    cx
seg000:1503
seg000:1503 loc_11503:				    ; CODE XREF: __amexpand+6j
seg000:1503		    inc	    cx
seg000:1504		    inc	    cx
seg000:1505		    mov	    dx,	7FFFh
seg000:1508
seg000:1508 loc_11508:				    ; CODE XREF: __amexpand+19j
seg000:1508		    cmp	    dx,	es:word_11944
seg000:150D		    jbe	    short loc_11513
seg000:150F		    shr	    dx,	1
seg000:1511		    jnz	    short loc_11508
seg000:1513
seg000:1513 loc_11513:				    ; CODE XREF: __amexpand+15j
seg000:1513					    ; __amexpand+34j
seg000:1513		    mov	    ax,	cx
seg000:1515		    add	    ax,	si
seg000:1517		    jb	    short loc_1152E
seg000:1519		    add	    ax,	dx
seg000:151B		    jb	    short loc_1152A
seg000:151D		    not	    dx
seg000:151F		    and	    ax,	dx
seg000:1521		    sub	    ax,	si
seg000:1523		    call    __amlink
seg000:1526		    jnz	    short loc_11530
seg000:1528		    not	    dx
seg000:152A
seg000:152A loc_1152A:				    ; CODE XREF: __amexpand+23j
seg000:152A		    shr	    dx,	1
seg000:152C		    jnz	    short loc_11513
seg000:152E
seg000:152E loc_1152E:				    ; CODE XREF: __amexpand+1Fj
seg000:152E		    xor	    ax,	ax
seg000:1530
seg000:1530 loc_11530:				    ; CODE XREF: __amexpand+2Ej
seg000:1530		    pop	    cx
seg000:1531		    retn
seg000:1531 __amexpand	    endp
seg000:1531
seg000:1532
seg000:1532 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1532
seg000:1532 ; Attributes: library function
seg000:1532
seg000:1532 __amlink	    proc near		    ; CODE XREF: __amalloc+B0p
seg000:1532					    ; __amalloc+BCp ...
seg000:1532		    push    dx
seg000:1533		    push    cx
seg000:1534		    call    __amallocbrk
seg000:1537		    jz	    short loc_11551
seg000:1539		    push    di
seg000:153A		    mov	    di,	si
seg000:153C		    mov	    si,	ax
seg000:153E		    add	    si,	dx
seg000:1540		    mov	    word ptr [si-2], 0FFFEh
seg000:1545		    mov	    [bx+6], si
seg000:1548		    mov	    dx,	si
seg000:154A		    sub	    dx,	di
seg000:154C		    dec	    dx
seg000:154D		    mov	    [di-2], dx
seg000:1550		    pop	    ax
seg000:1551
seg000:1551 loc_11551:				    ; CODE XREF: __amlink+5j
seg000:1551		    pop	    cx
seg000:1552		    pop	    dx
seg000:1553		    retn
seg000:1553 __amlink	    endp
seg000:1553
seg000:1554
seg000:1554 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1554
seg000:1554 ; Attributes: library function
seg000:1554
seg000:1554 __amallocbrk    proc near		    ; CODE XREF: _malloc+12p
seg000:1554					    ; __amlink+2p
seg000:1554		    push    bx
seg000:1555		    push    ax
seg000:1556		    xor	    dx,	dx
seg000:1558		    push    ds
seg000:1559		    push    dx
seg000:155A		    push    dx
seg000:155B		    push    ax
seg000:155C		    mov	    ax,	1
seg000:155F		    push    ax
seg000:1560		    push    es
seg000:1561		    pop	    ds
seg000:1562		    assume ds:dseg
seg000:1562		    call    _brkctl
seg000:1565		    add	    sp,	8
seg000:1568		    cmp	    dx,	0FFFFh
seg000:156B		    pop	    ds
seg000:156C		    pop	    dx
seg000:156D		    pop	    bx
seg000:156E		    jz	    short locret_11572
seg000:1570		    or	    dx,	dx
seg000:1572
seg000:1572 locret_11572:			    ; CODE XREF: __amallocbrk+1Aj
seg000:1572		    retn
seg000:1572 __amallocbrk    endp
seg000:1572
seg000:1572 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1573		    align 2
seg000:1574
seg000:1574 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1574
seg000:1574 ; Attributes: library function bp-based frame
seg000:1574
seg000:1574 _brkctl	    proc near		    ; CODE XREF: __amallocbrk+Ep
seg000:1574
seg000:1574 arg_0	    = word ptr	4
seg000:1574 arg_2	    = word ptr	6
seg000:1574 arg_4	    = word ptr	8
seg000:1574 arg_8	    = word ptr	0Ch
seg000:1574
seg000:1574		    push    bp
seg000:1575		    mov	    bp,	sp
seg000:1577		    push    si
seg000:1578		    push    di
seg000:1579		    push    es
seg000:157A		    cmp	    [bp+arg_4],	0
seg000:157E		    jnz	    short loc_115B8
seg000:1580		    mov	    di,	58h ; 'X'
seg000:1583		    mov	    dx,	[bp+arg_2]
seg000:1586		    mov	    ax,	[bp+arg_0]
seg000:1589		    dec	    ax
seg000:158A		    jnz	    short loc_11593
seg000:158C		    call    sub_115E2
seg000:158F		    jb	    short loc_115B8
seg000:1591		    jmp	    short loc_115DB
seg000:1593 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1593
seg000:1593 loc_11593:				    ; CODE XREF: _brkctl+16j
seg000:1593		    mov	    si,	word_11798
seg000:1597		    dec	    ax
seg000:1598		    jz	    short loc_115AB
seg000:159A		    cmp	    si,	di
seg000:159C		    jz	    short loc_115AB
seg000:159E		    mov	    ax,	[si+2]
seg000:15A1		    mov	    [bp+arg_8],	ax
seg000:15A4		    push    si
seg000:15A5		    call    sub_115E2
seg000:15A8		    pop	    si
seg000:15A9		    jnb	    short loc_115DB
seg000:15AB
seg000:15AB loc_115AB:				    ; CODE XREF: _brkctl+24j
seg000:15AB					    ; _brkctl+28j
seg000:15AB		    add	    si,	4
seg000:15AE		    cmp	    si,	0A8h ; '¨'
seg000:15B2		    jnb	    short loc_115B8
seg000:15B4		    or	    dx,	dx
seg000:15B6		    jnz	    short loc_115BE
seg000:15B8
seg000:15B8 loc_115B8:				    ; CODE XREF: _brkctl+Aj
seg000:15B8					    ; _brkctl+1Bj ...
seg000:15B8		    mov	    ax,	0FFFFh
seg000:15BB		    cwd
seg000:15BC		    jmp	    short loc_115DB
seg000:15BE ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:15BE
seg000:15BE loc_115BE:				    ; CODE XREF: _brkctl+42j
seg000:15BE		    mov	    bx,	dx
seg000:15C0		    add	    bx,	0Fh
seg000:15C3		    rcr	    bx,	1
seg000:15C5		    mov	    cl,	3
seg000:15C7		    shr	    bx,	cl
seg000:15C9		    mov	    ah,	48h
seg000:15CB		    int	    21h		    ; DOS - 2+ - ALLOCATE MEMORY
seg000:15CB					    ; BX = number of 16-byte paragraphs	desired
seg000:15CD		    jb	    short loc_115B8
seg000:15CF		    xchg    ax,	dx
seg000:15D0		    mov	    [si], ax
seg000:15D2		    mov	    [si+2], dx
seg000:15D5		    mov	    word_11798,	si
seg000:15D9		    xor	    ax,	ax
seg000:15DB
seg000:15DB loc_115DB:				    ; CODE XREF: _brkctl+1Dj
seg000:15DB					    ; _brkctl+35j ...
seg000:15DB		    pop	    es
seg000:15DC		    assume es:nothing
seg000:15DC		    pop	    di
seg000:15DD		    pop	    si
seg000:15DE		    mov	    sp,	bp
seg000:15E0		    pop	    bp
seg000:15E1		    retn
seg000:15E1 _brkctl	    endp
seg000:15E1
seg000:15E2
seg000:15E2 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:15E2
seg000:15E2 ; Attributes: library function
seg000:15E2
seg000:15E2 sub_115E2	    proc near		    ; CODE XREF: _brkctl+18p
seg000:15E2					    ; _brkctl+31p
seg000:15E2		    mov	    cx,	[bp+0Ch]
seg000:15E5		    mov	    si,	di
seg000:15E7
seg000:15E7 loc_115E7:				    ; CODE XREF: sub_115E2+11j
seg000:15E7		    cmp	    [si+2], cx
seg000:15EA		    jz	    short loc_115F8
seg000:15EC		    add	    si,	4
seg000:15EF		    cmp	    si,	0A8h ; '¨'
seg000:15F3		    jnz	    short loc_115E7
seg000:15F5		    stc
seg000:15F6		    jmp	    short locret_11637
seg000:15F8 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:15F8
seg000:15F8 loc_115F8:				    ; CODE XREF: sub_115E2+8j
seg000:15F8		    mov	    bx,	dx
seg000:15FA		    add	    bx,	[si]
seg000:15FC		    jb	    short locret_11637
seg000:15FE		    mov	    dx,	bx
seg000:1600		    mov	    es,	cx
seg000:1602		    cmp	    si,	di
seg000:1604		    jnz	    short loc_1160C
seg000:1606		    cmp	    word_11742,	bx
seg000:160A		    jnb	    short loc_11632
seg000:160C
seg000:160C loc_1160C:				    ; CODE XREF: sub_115E2+22j
seg000:160C		    add	    bx,	0Fh
seg000:160F		    rcr	    bx,	1
seg000:1611		    shr	    bx,	1
seg000:1613		    shr	    bx,	1
seg000:1615		    shr	    bx,	1
seg000:1617		    cmp	    si,	di
seg000:1619		    jnz	    short loc_11624
seg000:161B		    add	    bx,	cx
seg000:161D		    mov	    ax,	word_117B9
seg000:1620		    sub	    bx,	ax
seg000:1622		    mov	    es,	ax
seg000:1624
seg000:1624 loc_11624:				    ; CODE XREF: sub_115E2+37j
seg000:1624		    mov	    ah,	4Ah
seg000:1626		    int	    21h		    ; DOS - 2+ - ADJUST	MEMORY BLOCK SIZE (SETBLOCK)
seg000:1626					    ; ES = segment address of block to change
seg000:1626					    ; BX = new size in paragraphs
seg000:1628		    jb	    short locret_11637
seg000:162A		    cmp	    si,	di
seg000:162C		    jnz	    short loc_11632
seg000:162E		    mov	    word_11742,	dx
seg000:1632
seg000:1632 loc_11632:				    ; CODE XREF: sub_115E2+28j
seg000:1632					    ; sub_115E2+4Aj
seg000:1632		    xchg    ax,	dx
seg000:1633		    xchg    ax,	[si]
seg000:1635		    mov	    dx,	cx
seg000:1637
seg000:1637 locret_11637:			    ; CODE XREF: sub_115E2+14j
seg000:1637					    ; sub_115E2+1Aj ...
seg000:1637		    retn
seg000:1637 sub_115E2	    endp
seg000:1637
seg000:1638
seg000:1638 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1638
seg000:1638 ; Attributes: library function bp-based frame
seg000:1638
seg000:1638 _strlen	    proc near		    ; CODE XREF: iprint+D0p
seg000:1638					    ; _out+38p
seg000:1638
seg000:1638 arg_0	    = word ptr	4
seg000:1638
seg000:1638		    push    bp
seg000:1639		    mov	    bp,	sp
seg000:163B		    mov	    dx,	di
seg000:163D		    mov	    ax,	ds
seg000:163F		    mov	    es,	ax
seg000:1641		    assume es:dseg
seg000:1641		    mov	    di,	[bp+arg_0]
seg000:1644		    xor	    ax,	ax
seg000:1646		    mov	    cx,	0FFFFh
seg000:1649		    repne scasb
seg000:164B		    not	    cx
seg000:164D		    dec	    cx
seg000:164E		    xchg    ax,	cx
seg000:164F		    mov	    di,	dx
seg000:1651		    pop	    bp
seg000:1652		    retn
seg000:1652 _strlen	    endp
seg000:1652
seg000:1652 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1653		    align 2
seg000:1654
seg000:1654 ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:1654
seg000:1654 ; Attributes: library function bp-based frame
seg000:1654
seg000:1654 _ultoa	    proc near		    ; CODE XREF: iprint+C2p
seg000:1654
seg000:1654 arg_0	    = word ptr	4
seg000:1654 arg_2	    = word ptr	6
seg000:1654 arg_4	    = word ptr	8
seg000:1654 arg_6	    = word ptr	0Ah
seg000:1654
seg000:1654 ; FUNCTION CHUNK AT	seg000:1682 SIZE 0000005F BYTES
seg000:1654
seg000:1654		    push    bp
seg000:1655		    mov	    bp,	sp
seg000:1657		    push    si
seg000:1658		    push    di
seg000:1659		    mov	    bl,	0
seg000:165B		    jmp	    __cltoasub
seg000:165B _ultoa	    endp
seg000:165B
seg000:165E
seg000:165E ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S	U B R O	U T I N	E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
seg000:165E
seg000:165E ; Attributes: library function bp-based frame
seg000:165E
seg000:165E _isatty	    proc near		    ; CODE XREF: __flsbuf+86p
seg000:165E					    ; __ftbuf+23p ...
seg000:165E
seg000:165E arg_0	    = word ptr	4
seg000:165E
seg000:165E		    push    bp
seg000:165F		    mov	    bp,	sp
seg000:1661		    mov	    bx,	[bp+arg_0]
seg000:1664		    cmp	    bx,	word_117C0
seg000:1668		    jge	    short loc_1167B
seg000:166A		    cmp	    bx,	0
seg000:166D		    jl	    short loc_1167B
seg000:166F		    test    byte ptr [bx+0D2h],	40h
seg000:1674		    jz	    short loc_1167B
seg000:1676		    mov	    ax,	1
seg000:1679		    jmp	    short loc_1167D
seg000:167B ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:167B
seg000:167B loc_1167B:				    ; CODE XREF: _isatty+Aj
seg000:167B					    ; _isatty+Fj ...
seg000:167B		    xor	    ax,	ax
seg000:167D
seg000:167D loc_1167D:				    ; CODE XREF: _isatty+1Bj
seg000:167D		    mov	    sp,	bp
seg000:167F		    pop	    bp
seg000:1680		    retn
seg000:1680 _isatty	    endp
seg000:1680
seg000:1680 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:1681		    align 2
seg000:1682 ; START OF FUNCTION	CHUNK FOR _ultoa
seg000:1682
seg000:1682 __cltoasub:				    ; CODE XREF: _ultoa+7j
seg000:1682		    mov	    cx,	[bp+arg_6]
seg000:1685		    mov	    ax,	[bp+arg_0]
seg000:1688		    mov	    dx,	[bp+arg_2]
seg000:168B		    mov	    di,	[bp+arg_4]
seg000:168E
seg000:168E __cxtoa:
seg000:168E		    push    di
seg000:168F		    push    ds
seg000:1690		    pop	    es
seg000:1691		    cld
seg000:1692		    xchg    ax,	bx
seg000:1693		    or	    al,	al
seg000:1695		    jz	    short loc_116AA
seg000:1697		    cmp	    cx,	0Ah
seg000:169A		    jnz	    short loc_116AA
seg000:169C		    or	    dx,	dx
seg000:169E		    jns	    short loc_116AA
seg000:16A0		    mov	    al,	2Dh ; '-'
seg000:16A2		    stosb
seg000:16A3		    neg	    bx
seg000:16A5		    adc	    dx,	0
seg000:16A8		    neg	    dx
seg000:16AA
seg000:16AA loc_116AA:				    ; CODE XREF: _ultoa+41j
seg000:16AA					    ; _ultoa+46j ...
seg000:16AA		    mov	    si,	di
seg000:16AC
seg000:16AC loc_116AC:				    ; CODE XREF: _ultoa+74j
seg000:16AC		    xchg    ax,	dx
seg000:16AD		    xor	    dx,	dx
seg000:16AF		    or	    ax,	ax
seg000:16B1		    jz	    short loc_116B5
seg000:16B3		    div	    cx
seg000:16B5
seg000:16B5 loc_116B5:				    ; CODE XREF: _ultoa+5Dj
seg000:16B5		    xchg    ax,	bx
seg000:16B6		    div	    cx
seg000:16B8		    xchg    ax,	dx
seg000:16B9		    xchg    dx,	bx
seg000:16BB		    add	    al,	30h ; '0'
seg000:16BD		    cmp	    al,	39h ; '9'
seg000:16BF		    jbe	    short loc_116C3
seg000:16C1		    add	    al,	27h ; '''
seg000:16C3
seg000:16C3 loc_116C3:				    ; CODE XREF: _ultoa+6Bj
seg000:16C3		    stosb
seg000:16C4		    mov	    ax,	dx
seg000:16C6		    or	    ax,	bx
seg000:16C8		    jnz	    short loc_116AC
seg000:16CA		    mov	    [di], al
seg000:16CC
seg000:16CC loc_116CC:				    ; CODE XREF: _ultoa+84j
seg000:16CC		    dec	    di
seg000:16CD		    lodsb
seg000:16CE		    xchg    al,	[di]
seg000:16D0		    mov	    [si-1], al
seg000:16D3		    lea	    ax,	[si+1]
seg000:16D6		    cmp	    ax,	di
seg000:16D8		    jb	    short loc_116CC
seg000:16DA		    pop	    ax
seg000:16DB		    pop	    di
seg000:16DC		    pop	    si
seg000:16DD		    mov	    sp,	bp
seg000:16DF		    pop	    bp
seg000:16E0		    retn
seg000:16E0 ; END OF FUNCTION CHUNK FOR	_ultoa
seg000:16E0 ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
seg000:16E1		    db 0Fh dup(	  0)
seg000:16E1 seg000	    ends
seg000:16E1
dseg:0000 ; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
dseg:0000
dseg:0000 ; Segment type: Pure data
dseg:0000 dseg		  segment para public 'DATA'
dseg:0000		  assume cs:dseg
dseg:0000		  db	0
dseg:0001		  db	0
dseg:0002 word_116F2	  dw 0			  ; DATA XREF: start+50w
dseg:0004		  align	8
dseg:0008 aMsRunTimeLibra db 'MS Run-Time Library - Copyright (c) 1988, Microsoft Corp'
dseg:0040		  db  11h
dseg:0041		  db	0
dseg:0042 aHelloWorld	  db 'Hello, world!',0Ah,0 ; DATA XREF: main+5o
dseg:0051		  db	0
dseg:0052 word_11742	  dw 0			  ; DATA XREF: start+4Aw
dseg:0052					  ; __myalloc+8r ...
dseg:0054 word_11744	  dw 0			  ; DATA XREF: start+3Ew
dseg:0056 off_11746	  dw offset __exit	  ; DATA XREF: start+9Cw
dseg:0056					  ; start+AEr
dseg:0058 word_11748	  dw 0			  ; DATA XREF: start+39w
dseg:0058					  ; __myalloc+2r ...
dseg:005A		  dw seg dseg,26h dup(0)
dseg:00A8 word_11798	  dw 58h		  ; DATA XREF: _brkctl:loc_11593r
dseg:00A8					  ; _brkctl+61w
dseg:00AA aC_file_info	  db ';C_FILE_INFO',0
dseg:00B7 dword_117A7	  dd 0			  ; DATA XREF: __cinit+Cw
dseg:00B7					  ; __ctermsub+Er ...
dseg:00BB		  db	0
dseg:00BC		  db	0
dseg:00BD		  db	0
dseg:00BE		  db	0
dseg:00BF		  db	0
dseg:00C0		  db	0
dseg:00C1		  db	0
dseg:00C2		  db	0
dseg:00C3 word_117B3	  dw 0			  ; DATA XREF: sub_10558+26w
dseg:00C5		  db	0
dseg:00C6		  db	0
dseg:00C7		  db	0
dseg:00C8		  db	0
dseg:00C9 word_117B9	  dw 0			  ; DATA XREF: start+5Ew
dseg:00C9					  ; __cinit+26r ...
dseg:00CB word_117BB	  dw 0			  ; DATA XREF: __cinit+4w
dseg:00CB					  ; __setargv+7r ...
dseg:00CD		  align	2
dseg:00CE byte_117BE	  db 0			  ; DATA XREF: sub_10558w
dseg:00CF		  align	2
dseg:00D0 word_117C0	  dw 14h		  ; DATA XREF: _lseek+9r
dseg:00D0					  ; _write+9r ...
dseg:00D2		  db  81h ; 
dseg:00D3		  db  81h ; 
dseg:00D4		  db  81h ; 
dseg:00D5		  db	1
dseg:00D6		  db	1
dseg:00D7		  db	0
dseg:00D8		  db	0
dseg:00D9		  db	0
dseg:00DA		  db	0
dseg:00DB		  db	0
dseg:00DC		  db	0
dseg:00DD		  db	0
dseg:00DE		  db	0
dseg:00DF		  db	0
dseg:00E0		  db	0
dseg:00E1		  db	0
dseg:00E2		  db	0
dseg:00E3		  db	0
dseg:00E4		  db	0
dseg:00E5		  db	0
dseg:00E6 word_117D6	  dw 0			  ; DATA XREF: start+89r
dseg:00E6					  ; __setargv+BEw
dseg:00E8 word_117D8	  dw 0			  ; DATA XREF: start+85r
dseg:00E8					  ; __setargv+D0w
dseg:00EA word_117DA	  dw 0			  ; DATA XREF: start+81r
dseg:00EA					  ; __setenvp+44w
dseg:00EC word_117DC	  dw 0F0h		  ; DATA XREF: __setargv+29w
dseg:00EC					  ; __setargv+DEr
dseg:00EE seg_117DE	  dw seg dseg		  ; DATA XREF: __setargv+16w
dseg:00F0		  db  43h ; C
dseg:00F1		  db	0
dseg:00F2		  db	0
dseg:00F3		  db	0
dseg:00F4 byte_117E4	  db 0			  ; DATA XREF: __ctermsub+18r
dseg:00F5 byte_117E5	  db 0			  ; DATA XREF: __ctermsub+20r
dseg:00F6 dword_117E6	  dd 0			  ; DATA XREF: __ctermsub+23r
dseg:00FA word_117EA	  dw 0			  ; DATA XREF: __FF_MSGBANNER+Ar
dseg:00FA					  ; __FF_MSGBANNER+11r
dseg:00FC word_117EC	  dw 0A80h		  ; DATA XREF: __chkstk+7r
dseg:00FC					  ; _stackavail+1r
dseg:00FE word_117EE	  dw 0			  ; DATA XREF: __setargvw
dseg:00FE					  ; __setargv+18Ar
dseg:0100		  db	0
dseg:0101		  db  16h
dseg:0102		  db	2
dseg:0103		  db	2
dseg:0104		  db  18h
dseg:0105		  db  0Dh
dseg:0106		  db	9
dseg:0107		  db  0Ch
dseg:0108		  db  0Ch
dseg:0109		  db  0Ch
dseg:010A		  db	7
dseg:010B		  db	8
dseg:010C		  db  16h
dseg:010D		  db  16h
dseg:010E		  db 0FFh
dseg:010F		  db  12h
dseg:0110		  db  0Dh
dseg:0111		  db  12h
dseg:0112		  db	2
dseg:0113		  db 0FFh
dseg:0114 word_11804	  dw 0			  ; DATA XREF: __flsbuf+90w
dseg:0114					  ; __stbuf+Aw
dseg:0116		  db  80h,   5,2 dup(	0), 80h,   5,	1,7 dup(   0),	 2
dseg:0116		  db	1,6 dup(   0),2	dup(   2),6 dup(   0), 84h,   3
dseg:0116		  db 6 dup(   0),   2,	 4,78h dup(   0),   1,2	dup(   0)
dseg:0116		  db	2,74h dup(   0)
dseg:022E word_1191E	  dw 1AEh		  ; DATA XREF: _flushall:loc_105AAr
dseg:0230 aNull		  db '(null)',0
dseg:0237 aNull_0	  db '(null)',0
dseg:023E		  db '+- #',0
dseg:0243		  align	2
dseg:0244 word_11934	  dw 0			  ; DATA XREF: _malloc+1Fw
dseg:0246 word_11936	  dw 0			  ; DATA XREF: _malloc+22w
dseg:0248		  db	0
dseg:0249		  db	0
dseg:024A word_1193A	  dw 0			  ; DATA XREF: _malloc+32w
dseg:024C		  db	0
dseg:024D		  db	0
dseg:024E word_1193E	  dw 0			  ; DATA XREF: __amalloc+A2r
dseg:0250		  db	0
dseg:0251		  db	0
dseg:0252 word_11942	  dw 0			  ; DATA XREF: __amalloc+4Fw
dseg:0252					  ; __amalloc+D6w
dseg:0254 word_11944	  dw 2000h		  ; DATA XREF: __amexpand:loc_11508r
dseg:0256		  align	4
dseg:0258 byte_11948	  db 0			  ; DATA XREF: __amalloc:loc_1146Dw
dseg:0258					  ; __amalloc:loc_114A8w
dseg:0259		  align	2
dseg:025A off_1194A	  dw offset sub_10262	  ; DATA XREF: fprint+53r
dseg:025C off_1194C	  dw offset sub_10262	  ; DATA XREF: fprint+6Br
dseg:025E		  db  62h ; b
dseg:025F		  db	2
dseg:0260 off_11950	  dw offset sub_10262	  ; DATA XREF: fprint+84r
dseg:0262 off_11952	  dw offset sub_10262	  ; DATA XREF: fprint+A2r
dseg:0264		  db	0
dseg:0265		  db	0
dseg:0266		  db	0
dseg:0267		  db	0
dseg:0268		  db	0
dseg:0269		  db	0
dseg:026A		  db	0
dseg:026B		  db	0
dseg:026C unk_1195C	  db	0		  ; DATA XREF: __cinit+37r
dseg:026C					  ; __cinit+4Dr ...
dseg:026D		  db	0
dseg:026E word_1195E	  dw 0			  ; DATA XREF: __cinit+20r
dseg:026E					  ; __ctermsubr
dseg:0270 dword_11960	  dd 0			  ; DATA XREF: __cinit+2Fr
dseg:0274 dword_11964	  dd 0			  ; DATA XREF: __cinit:loc_10115r
dseg:0278		  db  86h ; 
dseg:0279		  db	5
dseg:027A aNmsg		  db '<<NMSG>>',0
dseg:0283		  db	0
dseg:0284 aR6000StackOver db 'R6000',0Dh,0Ah
dseg:0284		  db '- stack overflow',0Dh,0Ah,0
dseg:029E		  db	3
dseg:029F		  db	0
dseg:02A0 aR6003IntegerDi db 'R6003',0Dh,0Ah
dseg:02A0		  db '- integer divide by 0',0Dh,0Ah,0
dseg:02BF		  db	9
dseg:02C0		  db	0
dseg:02C1 aR6009NotEnough db 'R6009',0Dh,0Ah
dseg:02C1		  db '- not enough space for environment',0Dh,0Ah,0
dseg:02ED		  db 0FCh ; ü
dseg:02EE		  db	0
dseg:02EF		  db  0Dh
dseg:02F0		  db  0Ah
dseg:02F1		  db	0
dseg:02F2		  db 0FFh
dseg:02F3		  db	0
dseg:02F4 aRunTimeError	  db 'run-time error ',0
dseg:0304		  db	2
dseg:0305		  db	0
dseg:0306 aR6002FloatingP db 'R6002',0Dh,0Ah
dseg:0306		  db '- floating point not loaded',0Dh,0Ah,0
dseg:032B		  db	1
dseg:032C		  db	0
dseg:032D aR6001NullPoint db 'R6001',0Dh,0Ah
dseg:032D		  db '- null pointer assignment',0Dh,0Ah,0
dseg:0350		  db 0FFh
dseg:0351		  db 0FFh
dseg:0352		  db 0FFh
dseg:0353		  align	2
dseg:0354 word_11A44	  dw ?			  ; DATA XREF: __output+55w
dseg:0354					  ; __output:loc_109D2w ...
dseg:0356 word_11A46	  dw ?			  ; DATA XREF: __output+1Ew
dseg:0356					  ; __output+2BBr ...
dseg:0358 word_11A48	  dw ?			  ; DATA XREF: __output+52w
dseg:0358					  ; __output:loc_10AEAw ...
dseg:035A word_11A4A	  dw ?			  ; DATA XREF: __output+43w
dseg:035A					  ; __output:loc_10A98w ...
dseg:035C word_11A4C	  dw ?			  ; DATA XREF: __output+49w
dseg:035C					  ; __output+111w ...
dseg:035E word_11A4E	  dw ?			  ; DATA XREF: __output+40w
dseg:035E					  ; __output+75w ...
dseg:0360 word_11A50	  dw ?			  ; DATA XREF: __output+58w
dseg:0360					  ; __output+9Fw ...
dseg:0362 word_11A52	  dw ?			  ; DATA XREF: __output+18w
dseg:0362					  ; __output:loc_10AB8r ...
dseg:0364 word_11A54	  dw ?			  ; DATA XREF: __output+4Fw
dseg:0364					  ; __output+79w ...
dseg:0366 word_11A56	  dw ?			  ; DATA XREF: __output+4Cw
dseg:0366					  ; __output+D7w ...
dseg:0368 word_11A58	  dw ?			  ; DATA XREF: __output+46w
dseg:0368					  ; __output:loc_10ACCw ...
dseg:036A word_11A5A	  dw ?			  ; DATA XREF: __output+27w
dseg:036A					  ; __output+180r ...
dseg:036C word_11A5C	  dw ?			  ; DATA XREF: __output+21w
dseg:036C					  ; __output:loc_10C34r ...
dseg:036E word_11A5E	  dw ?			  ; DATA XREF: __output:loc_10976w
dseg:036E					  ; __output+E9r ...
dseg:0370 word_11A60	  dw ?			  ; DATA XREF: __output+1BBw
dseg:0370					  ; __output:loc_10B02w ...
dseg:0372 word_11A62	  dw ?			  ; DATA XREF: __output+12w
dseg:0372					  ; iprint+79r	...
dseg:0374 word_11A64	  dw ?			  ; DATA XREF: __output+BFr
dseg:0374					  ; __output+CAr ...
dseg:0376 word_11A66	  dw ?			  ; DATA XREF: iprint:loc_10CD2w
dseg:0376					  ; fprint+90w	...
dseg:0378 word_11A68	  dw ?			  ; DATA XREF: __output+5Bw
dseg:0378					  ; __output+68w ...
dseg:037A		  db 606h dup(	 ?)
dseg:037A dseg		  ends
dseg:037A
seg002:0000 ; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
seg002:0000
seg002:0000 ; Segment type: Uninitialized
seg002:0000 seg002	    segment byte stack 'STACK'
seg002:0000		    assume cs:seg002
seg002:0000		    assume es:nothing, ss:nothing, ds:dseg
seg002:0000 byte_12070	    db 800h dup(?)
seg002:0000 seg002	    ends
seg002:0000
seg002:0000
seg002:0000		    end	start
